{"version":3,"mappings":"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","names":["LAST_USED_CHAIN_ID","LAST_SESSION","_provider","_storage","_handleConnected","_removeListeners","WalletConnectV1Connector","WagmiConnector","config","_classPrivateMethodInitSpec","_defineProperty","walletIds","_classPrivateFieldInitSpec","error","payload","message","accounts","utils.getAddress","chainId","id","normalizeChainId","unsupported","_classPrivateFieldGet","_classPrivateMethodGet","_removeListeners2","_classPrivateFieldSet","targetChainId","lastUsedChainIdStr","lastUsedChainId","provider","account","_c","e","_handleConnected2","providers.Web3Provider","UserRejectedRequestError","create","rpc","_a","rpc_","chain","WalletConnectProvider","__vitePreload","sessionStr","session","_b","chainIdHex","utils.hexValue","res","_ref","x","SwitchChainError","blockExplorerUrls"],"sources":["../../node_modules/@thirdweb-dev/wallets/evm/connectors/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.browser.esm.js"],"sourcesContent":["import { _ as _classPrivateMethodInitSpec, a as _classPrivateMethodGet } from '../../../../dist/classPrivateMethodGet-ea199cc3.browser.esm.js';\nimport { _ as _classPrivateFieldInitSpec, b as _classPrivateFieldGet, a as _classPrivateFieldSet } from '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { w as walletIds } from '../../../../dist/walletIds-1ea97411.browser.esm.js';\nimport { utils, providers } from 'ethers';\nimport { W as WagmiConnector } from '../../../../dist/WagmiConnector-60b19604.browser.esm.js';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-e4cc0175.browser.esm.js';\nimport { U as UserRejectedRequestError, S as SwitchChainError } from '../../../../dist/errors-105ad187.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\n/**\n * Wallets that support chain switching through WalletConnect\n * - imToken (token.im)\n * - MetaMask (metamask.io)\n * - Rainbow (rainbow.me)\n * - Trust Wallet (trustwallet.com)\n */\n// const switchChainAllowedRegex = /(imtoken|metamask|rainbow|trust wallet)/i;\n\nconst LAST_USED_CHAIN_ID = \"last-used-chain-id\";\nconst LAST_SESSION = \"last-session\";\nvar _provider = /*#__PURE__*/new WeakMap();\nvar _storage = /*#__PURE__*/new WeakMap();\nvar _handleConnected = /*#__PURE__*/new WeakSet();\nvar _removeListeners = /*#__PURE__*/new WeakSet();\nclass WalletConnectV1Connector extends WagmiConnector {\n  constructor(config) {\n    super(config);\n    _classPrivateMethodInitSpec(this, _removeListeners);\n    _classPrivateMethodInitSpec(this, _handleConnected);\n    _defineProperty(this, \"id\", walletIds.walletConnectV1);\n    _defineProperty(this, \"name\", \"WalletConnectV1\");\n    _defineProperty(this, \"ready\", true);\n    _classPrivateFieldInitSpec(this, _provider, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _storage, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, \"walletName\", void 0);\n    _defineProperty(this, \"onSwitchChain\", () => {\n      this.emit(\"message\", {\n        type: \"switch_chain\"\n      });\n    });\n    _defineProperty(this, \"onDisplayUri\", async (error, payload) => {\n      if (error) {\n        this.emit(\"message\", {\n          data: error,\n          type: \"display_uri_error\"\n        });\n      }\n      this.emit(\"message\", {\n        data: payload.params[0],\n        type: \"display_uri\"\n      });\n    });\n    _defineProperty(this, \"onRequestSent\", (error, payload) => {\n      if (error) {\n        this.emit(\"message\", {\n          data: error,\n          type: \"request\"\n        });\n      }\n      this.emit(\"message\", {\n        data: payload.params[0],\n        type: \"request\"\n      });\n    });\n    _defineProperty(this, \"onMessage\", message => {\n      this.emit(\"message\", message);\n    });\n    _defineProperty(this, \"onAccountsChanged\", accounts => {\n      if (accounts.length === 0) {\n        this.emit(\"disconnect\");\n      } else {\n        this.emit(\"change\", {\n          account: utils.getAddress(accounts[0])\n        });\n      }\n    });\n    _defineProperty(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      _classPrivateFieldGet(this, _storage).setItem(LAST_USED_CHAIN_ID, String(chainId));\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    _defineProperty(this, \"onDisconnect\", async () => {\n      this.walletName = undefined;\n      _classPrivateFieldGet(this, _storage).removeItem(LAST_USED_CHAIN_ID);\n      _classPrivateFieldGet(this, _storage).removeItem(LAST_SESSION);\n      _classPrivateMethodGet(this, _removeListeners, _removeListeners2).call(this);\n      this.emit(\"disconnect\");\n    });\n    _classPrivateFieldSet(this, _storage, config.storage);\n  }\n  async connect() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      let targetChainId = chainId;\n      if (!targetChainId) {\n        const lastUsedChainIdStr = await _classPrivateFieldGet(this, _storage).getItem(LAST_USED_CHAIN_ID);\n        const lastUsedChainId = lastUsedChainIdStr ? parseInt(lastUsedChainIdStr) : undefined;\n        if (lastUsedChainId && !this.isChainUnsupported(lastUsedChainId)) {\n          targetChainId = lastUsedChainId;\n        }\n      }\n      const provider = await this.getProvider({\n        chainId: targetChainId,\n        create: true\n      });\n      this.setupListeners();\n\n      // Defer message to the next tick to ensure wallet connect data (provided by `.enable()`) is available\n      setTimeout(() => this.emit(\"message\", {\n        type: \"connecting\"\n      }), 0);\n      const accounts = await provider.enable();\n      const account = utils.getAddress(accounts[0]);\n      let id = await this.getChainId();\n      let unsupported = this.isChainUnsupported(id);\n\n      // Not all WalletConnect options support programmatic chain switching\n      // Only enable for wallet options that do\n      this.walletName = provider.connector?.peerMeta?.name ?? \"\";\n\n      // switch to target chainId\n      if (chainId) {\n        try {\n          await this.switchChain(chainId);\n          id = chainId;\n          unsupported = this.isChainUnsupported(id);\n        } catch (e) {\n          console.error(`could not switch to desired chain id: ${chainId} `, e);\n        }\n      }\n      _classPrivateMethodGet(this, _handleConnected, _handleConnected2).call(this);\n      this.emit(\"connect\", {\n        account,\n        chain: {\n          id,\n          unsupported\n        },\n        provider\n      });\n      return {\n        account,\n        chain: {\n          id,\n          unsupported\n        },\n        provider: new providers.Web3Provider(provider)\n      };\n    } catch (error) {\n      if (/user closed modal/i.test(error.message)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw error;\n    }\n  }\n  async disconnect() {\n    const provider = await this.getProvider();\n    await provider.disconnect();\n  }\n  async getAccount() {\n    const provider = await this.getProvider();\n    const accounts = provider.accounts;\n    // return checksum address\n    return utils.getAddress(accounts[0]);\n  }\n  async getChainId() {\n    const provider = await this.getProvider();\n    const chainId = normalizeChainId(provider.chainId);\n    return chainId;\n  }\n  async getProvider() {\n    let {\n      chainId,\n      create\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // Force create new provider\n    if (!_classPrivateFieldGet(this, _provider) || chainId || create) {\n      const rpc = !this.options?.infuraId ? this.chains.reduce((rpc_, chain) => ({\n        ...rpc_,\n        [chain.chainId]: chain.rpc[0]\n      }), {}) : {};\n      const WalletConnectProvider = (await import('../../../../dist/index-42b0f5f5.browser.esm.js')).default;\n      const sessionStr = await _classPrivateFieldGet(this, _storage).getItem(LAST_SESSION);\n      const session = sessionStr ? JSON.parse(sessionStr) : undefined;\n      this.walletName = session?.peerMeta?.name || undefined;\n      _classPrivateFieldSet(this, _provider, new WalletConnectProvider({\n        ...this.options,\n        chainId,\n        rpc: {\n          ...rpc,\n          ...this.options?.rpc\n        },\n        session: session ? session : undefined\n      }));\n    }\n    return _classPrivateFieldGet(this, _provider);\n  }\n  async getSigner() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const [provider, account] = await Promise.all([this.getProvider({\n      chainId\n    }), this.getAccount()]);\n    return new providers.Web3Provider(provider, chainId).getSigner(account);\n  }\n  async isAuthorized() {\n    try {\n      const account = await this.getAccount();\n      return !!account;\n    } catch {\n      return false;\n    }\n  }\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    const chainIdHex = utils.hexValue(chainId);\n    try {\n      // Set up a race between `wallet_switchEthereumChain` & the `chainChanged` event\n      // to ensure the chain has been switched. This is because there could be a case\n      // where a wallet may not resolve the `wallet_switchEthereumChain` method, or\n      // resolves slower than `chainChanged`.\n      await Promise.race([provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: chainIdHex\n        }]\n      }), new Promise(res => this.on(\"change\", _ref => {\n        let {\n          chain\n        } = _ref;\n        if (chain?.id === chainId) {\n          res(chainId);\n        }\n      }))]);\n      return this.chains.find(x => x.chainId === chainId) ?? {\n        chainId: chainId,\n        name: `Chain ${chainIdHex}`,\n        network: `${chainIdHex}`,\n        nativeCurrency: {\n          name: \"Ether\",\n          decimals: 18,\n          symbol: \"ETH\"\n        },\n        rpc: [\"\"],\n        shortName: \"eth\",\n        chain: \"ETH\",\n        slug: \"ethereum\",\n        testnet: false\n      };\n    } catch (error) {\n      const message = typeof error === \"string\" ? error : error?.message;\n      if (/user rejected request/i.test(message)) {\n        throw new UserRejectedRequestError(error);\n      }\n      const chain = this.chains.find(x => x.chainId === chainId);\n\n      // if chain is not supported\n      if (!chain) {\n        throw new SwitchChainError(`Chain ${chainId} is not added in the list of supported chains`);\n      }\n\n      // if chain is not configured in the wallet\n      if (/Unrecognized chain ID/i.test(message)) {\n        // configure it\n        this.emit(\"message\", {\n          type: \"add_chain\"\n        });\n        const blockExplorerUrls = this.getBlockExplorerUrls(chain);\n        await provider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{\n            chainId: chainIdHex,\n            chainName: chain.name,\n            nativeCurrency: chain.nativeCurrency,\n            rpcUrls: chain.rpc,\n            blockExplorerUrls\n          }]\n        });\n        return chain;\n      } else {\n        throw new SwitchChainError(error);\n      }\n    }\n  }\n  async setupListeners() {\n    if (!_classPrivateFieldGet(this, _provider)) {\n      return;\n    }\n    _classPrivateFieldGet(this, _provider).on(\"accountsChanged\", this.onAccountsChanged);\n    _classPrivateFieldGet(this, _provider).on(\"chainChanged\", this.onChainChanged);\n    _classPrivateFieldGet(this, _provider).on(\"disconnect\", this.onDisconnect);\n    _classPrivateFieldGet(this, _provider).on(\"message\", this.onMessage);\n    _classPrivateFieldGet(this, _provider).on(\"switchChain\", this.onSwitchChain);\n    _classPrivateFieldGet(this, _provider).on(\"display_uri\", this.onDisplayUri);\n    _classPrivateFieldGet(this, _provider).on(\"call_request_sent\", this.onRequestSent);\n  }\n}\nasync function _handleConnected2() {\n  const session = _classPrivateFieldGet(this, _provider)?.connector.session;\n  this.walletName = session?.peerMeta?.name || \"\";\n  const sessionStr = JSON.stringify(session);\n  _classPrivateFieldGet(this, _storage).setItem(LAST_SESSION, sessionStr);\n}\nfunction _removeListeners2() {\n  if (!_classPrivateFieldGet(this, _provider)) {\n    return;\n  }\n  _classPrivateFieldGet(this, _provider).removeListener(\"accountsChanged\", this.onAccountsChanged);\n  _classPrivateFieldGet(this, _provider).removeListener(\"chainChanged\", this.onChainChanged);\n  _classPrivateFieldGet(this, _provider).removeListener(\"disconnect\", this.onDisconnect);\n  _classPrivateFieldGet(this, _provider).removeListener(\"message\", this.onMessage);\n  _classPrivateFieldGet(this, _provider).removeListener(\"switchChain\", this.onSwitchChain);\n  _classPrivateFieldGet(this, _provider).removeListener(\"display_uri\", this.onDisplayUri);\n  _classPrivateFieldGet(this, _provider).removeListener(\"call_request_sent\", this.onRequestSent);\n}\n\nexport { WalletConnectV1Connector };\n"],"file":"assets/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.browser.esm.a2440755.js"}