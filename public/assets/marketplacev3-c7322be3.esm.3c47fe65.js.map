{"version":3,"file":"marketplacev3-c7322be3.esm.3c47fe65.js","sources":["../../node_modules/@thirdweb-dev/sdk/dist/marketplacev3-c7322be3.esm.js"],"sourcesContent":["import { A as AmountSchema, _ as _defineProperty } from './QueryParams-bc2daded.esm.js';\nimport { cF as AddressSchema, cG as BigNumberishSchema, c2 as NATIVE_TOKEN_ADDRESS, cH as RawDateSchema, cI as EndDateSchema, cJ as FEATURE_DIRECT_LISTINGS, aM as ContractEvents, aa as ContractEncoder, aN as ContractInterceptor, aL as GasCostEstimator, cK as getAllInBatches, cL as handleTokenApproval, a$ as normalizePriceValue, cM as cleanCurrencyAddress, cN as setErc20Allowance, aV as Status, aZ as fetchCurrencyValue, cO as fetchTokenMetadataForContract, cP as isTokenApprovedForTransfer, c0 as InterfaceId_IERC721, c1 as InterfaceId_IERC1155, cQ as FEATURE_ENGLISH_AUCTIONS, a_ as fetchCurrencyMetadata, bk as AuctionHasNotEndedError, cR as FEATURE_OFFERS, cE as isNativeToken, c3 as NATIVE_TOKENS, cz as ContractWrapper, bO as assertEnabled, ab as ContractMetadata, cC as MarketplaceContractSchema, ac as ContractRoles, aO as ContractPlatformFee, bP as detectContractFeature } from './thirdweb-checkout-28b27df7.esm.js';\nimport { z } from 'zod';\nimport ERC165Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport Erc721Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport Erc1155Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport { BigNumber, Contract, constants, ethers } from 'ethers';\nimport invariant from 'tiny-invariant';\nimport ERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport 'bn.js';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport 'cross-fetch';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Router.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport 'bs58';\n\n/**\n * @internal\n */\nconst DirectListingInputParamsSchema = z.object({\n  /**\n   * The address of the asset being listed.\n   */\n  assetContractAddress: AddressSchema,\n  /**\n   * The ID of the token to list.\n   */\n  tokenId: BigNumberishSchema,\n  /**\n   * The quantity of tokens to include in the listing.\n   *\n   * For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n   */\n  quantity: BigNumberishSchema.default(1),\n  /**\n   * The address of the currency to accept for the listing.\n   */\n  currencyContractAddress: AddressSchema.default(NATIVE_TOKEN_ADDRESS),\n  /**\n   * The price to pay per unit of NFTs listed.\n   */\n  pricePerToken: AmountSchema,\n  /**\n   * The start time of the listing.\n   */\n  startTimestamp: RawDateSchema.default(new Date()),\n  /**\n   * The end time of the listing.\n   */\n  endTimestamp: EndDateSchema,\n  /**\n   * Whether the listing is reserved to be bought from a specific set of buyers.\n   */\n  isReservedListing: z.boolean().default(false)\n});\n\n/**\n * @public\n */\n\n/**\n * Handles direct listings\n * @public\n */\nclass MarketplaceV3DirectListings {\n  // utilities\n\n  constructor(contractWrapper, storage) {\n    _defineProperty(this, \"featureName\", FEATURE_DIRECT_LISTINGS.name);\n    _defineProperty(this, \"contractWrapper\", void 0);\n    _defineProperty(this, \"storage\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.events = new ContractEvents(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total number of direct listings.\n   * @returns Returns the total number of direct listings created.\n   * @public\n   *\n   * @example\n   * ```javascript\n   * const totalListings = await contract.directListings.getTotalCount();\n   * ```\n   */\n  async getTotalCount() {\n    return await this.contractWrapper.readContract.totalListings();\n  }\n\n  /**\n   * Get all direct listings.\n   *\n   * @example\n   * ```javascript\n   * const listings = await contract.directListings.getAll();\n   * const priceOfFirstListing = listings[0].price;\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Direct listing object array\n   */\n  async getAll(filter) {\n    const totalListings = await this.getTotalCount();\n    let start = BigNumber.from(filter?.start || 0).toNumber();\n    let end = totalListings.toNumber();\n    if (end === 0) {\n      throw new Error(`No listings exist on the contract.`);\n    }\n    let rawListings = [];\n    let batches = await getAllInBatches(start, end, this.contractWrapper.readContract.getAllListings);\n    rawListings = batches.flat();\n    const filteredListings = this.applyFilter(rawListings, filter);\n    return await Promise.all(filteredListings.map(listing => this.mapListing(listing)));\n  }\n\n  /**\n   * Get all valid direct listings.\n   *\n   * A valid listing is where the listing is active,\n   * and the creator still owns & has approved Marketplace to transfer the listed NFTs.\n   *\n   * @example\n   * ```javascript\n   * const listings = await contract.directListings.getAllValid();\n   * const priceOfFirstListing = listings[0].price;\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Direct listing object array\n   */\n  async getAllValid(filter) {\n    const totalListings = await this.getTotalCount();\n    let start = BigNumber.from(filter?.start || 0).toNumber();\n    let end = totalListings.toNumber();\n    if (end === 0) {\n      throw new Error(`No listings exist on the contract.`);\n    }\n    let rawListings = [];\n    let batches = await getAllInBatches(start, end, this.contractWrapper.readContract.getAllValidListings);\n    rawListings = batches.flat();\n    const filteredListings = this.applyFilter(rawListings, filter);\n    return await Promise.all(filteredListings.map(listing => this.mapListing(listing)));\n  }\n\n  /**\n   * Get a direct listing by id.\n   *\n   * @param listingId - the listing id\n   * @returns the Direct listing object\n   *\n   * @example\n   * ```javascript\n   * const listingId = 0;\n   * const listing = await contract.directListings.getListing(listingId);\n   * ```\n   */\n  async getListing(listingId) {\n    const listing = await this.contractWrapper.readContract.getListing(listingId);\n    return await this.mapListing(listing);\n  }\n\n  /**\n   * Check whether a buyer is approved for a reserved listing.\n   *\n   * @param listingId - the listing id\n   * @param buyer - buyer address\n   */\n  async isBuyerApprovedForListing(listingId, buyer) {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    if (!listing.isReservedListing) {\n      throw new Error(`Listing ${listingId} is not a reserved listing.`);\n    }\n    return await this.contractWrapper.readContract.isBuyerApprovedForListing(listingId, buyer);\n  }\n\n  /**\n   * Check whether a currency is approved for a listing.\n   *\n   * @param listingId - the listing id\n   * @param currency - currency address\n   */\n  async isCurrencyApprovedForListing(listingId, currency) {\n    await this.validateListing(BigNumber.from(listingId));\n    return await this.contractWrapper.readContract.isCurrencyApprovedForListing(listingId, currency);\n  }\n\n  /**\n   * Check price per token for an approved currency.\n   *\n   * @param listingId - the listing id\n   * @param currencyContractAddress - currency contract address\n   */\n  async currencyPriceForListing(listingId, currencyContractAddress) {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    if (currencyContractAddress === listing.currencyContractAddress) {\n      return listing.pricePerToken;\n    }\n    const isApprovedCurrency = await this.isCurrencyApprovedForListing(listingId, currencyContractAddress);\n    if (!isApprovedCurrency) {\n      throw new Error(`Currency ${currencyContractAddress} is not approved for Listing ${listingId}.`);\n    }\n    return await this.contractWrapper.readContract.currencyPriceForListing(listingId, currencyContractAddress);\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Direct Listing\n   *\n   * @remarks Create a new listing on the marketplace where people can buy an asset directly.\n   *\n   * @example\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // The price to pay per unit of NFTs listed.\n   *   pricePerToken: 1.5,\n   *   // when should the listing open up for offers\n   *   startTimestamp: new Date(Date.now()),\n   *   // how long the listing will be open for\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   *   // Whether the listing is reserved for a specific set of buyers.\n   *   isReservedListing: false\n   * }\n   *\n   * const tx = await contract.directListings.createListing(listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   * ```\n   */\n  async createListing(listing) {\n    const parsedListing = DirectListingInputParamsSchema.parse(listing);\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), parsedListing.assetContractAddress, parsedListing.tokenId, await this.contractWrapper.getSignerAddress());\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), parsedListing.pricePerToken, parsedListing.currencyContractAddress);\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    if (parsedListing.startTimestamp.lt(blockTime)) {\n      parsedListing.startTimestamp = BigNumber.from(blockTime);\n    }\n    const receipt = await this.contractWrapper.sendTransaction(\"createListing\", [{\n      assetContract: parsedListing.assetContractAddress,\n      tokenId: parsedListing.tokenId,\n      quantity: parsedListing.quantity,\n      currency: cleanCurrencyAddress(parsedListing.currencyContractAddress),\n      pricePerToken: normalizedPricePerToken,\n      startTimestamp: parsedListing.startTimestamp,\n      endTimestamp: parsedListing.endTimestamp,\n      reserved: parsedListing.isReservedListing\n    }], {\n      // Higher gas limit for create listing\n      gasLimit: 500000\n    });\n    const event = this.contractWrapper.parseLogs(\"NewListing\", receipt?.logs);\n    return {\n      id: event[0].args.listingId,\n      receipt\n    };\n  }\n\n  /**\n   * Update a Direct listing with new metadata.\n   *\n   * Note: cannot update a listing with a new quantity of 0. Use `cancelDirectListing` to remove a listing instead.\n   *\n   * @param listing - the new listing information\n   *\n   * @example\n   * ```javascript\n   * // Data of the listing you want to update\n   *\n   * const listingId = 0; // ID of the listing you want to update\n   *\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\", // should be same as original listing\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\", // should be same as original listing\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // The price to pay per unit of NFTs listed.\n   *   pricePerToken: 1.5,\n   *   // when should the listing open up for offers\n   *   startTimestamp: new Date(Date.now()), // can't change this if listing already active\n   *   // how long the listing will be open for\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   *   // Whether the listing is reserved for a specific set of buyers.\n   *   isReservedListing: false\n   * }\n   *\n   * const tx = await contract.directListings.updateListing(listingId, listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   * ```\n   */\n  async updateListing(listingId, listing) {\n    const parsedListing = DirectListingInputParamsSchema.parse(listing);\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), parsedListing.assetContractAddress, parsedListing.tokenId, await this.contractWrapper.getSignerAddress());\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), parsedListing.pricePerToken, parsedListing.currencyContractAddress);\n    const receipt = await this.contractWrapper.sendTransaction(\"updateListing\", [listingId, {\n      assetContract: parsedListing.assetContractAddress,\n      tokenId: parsedListing.tokenId,\n      quantity: parsedListing.quantity,\n      currency: cleanCurrencyAddress(parsedListing.currencyContractAddress),\n      pricePerToken: normalizedPricePerToken,\n      startTimestamp: parsedListing.startTimestamp,\n      endTimestamp: parsedListing.endTimestamp,\n      reserved: parsedListing.isReservedListing\n    }], {\n      // Higher gas limit for create listing\n      gasLimit: 500000\n    });\n    const event = this.contractWrapper.parseLogs(\"UpdatedListing\", receipt?.logs);\n    return {\n      id: event[0].args.listingId,\n      receipt\n    };\n  }\n\n  /**\n   * Cancel Direct Listing\n   *\n   * @remarks Cancel a direct listing on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want to cancel\n   * const listingId = 0;\n   *\n   * await contract.directListings.cancelListing(listingId);\n   * ```\n   */\n  async cancelListing(listingId) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"cancelListing\", [listingId])\n    };\n  }\n\n  /**\n   * Buy from a Listing\n   *\n   * @remarks Buy from a specific direct listing from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The ID of the listing you want to buy from\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await contract.directListings.buyFromListing(listingId, quantityDesired);\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param quantityDesired - the quantity to buy\n   * @param receiver - optional receiver of the bought listing if different from the connected wallet\n   */\n  async buyFromListing(listingId, quantityDesired, receiver) {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const {\n      valid,\n      error\n    } = await this.isStillValidListing(listing, quantityDesired);\n    if (!valid) {\n      throw new Error(`Listing ${listingId} is no longer valid. ${error}`);\n    }\n    const buyFor = receiver ? receiver : await this.contractWrapper.getSignerAddress();\n    const quantity = BigNumber.from(quantityDesired);\n    const value = BigNumber.from(listing.pricePerToken).mul(quantity);\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(this.contractWrapper, value, listing.currencyContractAddress, overrides);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"buyFromListing\", [listingId, buyFor, quantity, listing.currencyContractAddress, value], overrides)\n    };\n  }\n\n  /**\n   * Approve buyer for reserved listing.\n   *\n   * @remarks Approve a buyer to buy from a reserved listing.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want approve buyer for\n   * const listingId = \"0\";\n   *\n   * await contract.directListings.approveBuyerForReservedListing(listingId, buyer);\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param buyer - Address of buyer being approved\n   */\n  async approveBuyerForReservedListing(listingId, buyer) {\n    const isApproved = await this.isBuyerApprovedForListing(listingId, buyer);\n    if (!isApproved) {\n      return {\n        receipt: await this.contractWrapper.sendTransaction(\"approveBuyerForListing\", [listingId, buyer, true])\n      };\n    } else {\n      throw new Error(`Buyer ${buyer} already approved for listing ${listingId}.`);\n    }\n  }\n\n  /**\n   * Revoke approval of a buyer for reserved listing.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want approve buyer for\n   * const listingId = \"0\";\n   *\n   * await contract.directListings.revokeBuyerApprovalForReservedListing(listingId, buyer);\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param buyer - Address of buyer being approved\n   */\n  async revokeBuyerApprovalForReservedListing(listingId, buyer) {\n    const isApproved = await this.isBuyerApprovedForListing(listingId, buyer);\n    if (isApproved) {\n      return {\n        receipt: await this.contractWrapper.sendTransaction(\"approveBuyerForListing\", [listingId, buyer, false])\n      };\n    } else {\n      throw new Error(`Buyer ${buyer} not approved for listing ${listingId}.`);\n    }\n  }\n\n  /**\n   * Approve a currency for a listing.\n   *\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want approve currency for\n   * const listingId = \"0\";\n   *\n   * await contract.directListings.approveCurrencyForListing(listingId, currencyContractAddress, pricePerTokenInCurrency);\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param currencyContractAddress - Address of currency being approved\n   * @param pricePerTokenInCurrency - Price per token in the currency\n   */\n  async approveCurrencyForListing(listingId, currencyContractAddress, pricePerTokenInCurrency) {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    if (currencyContractAddress === listing.currencyContractAddress) {\n      invariant(pricePerTokenInCurrency === listing.pricePerToken, \"Approving listing currency with a different price.\");\n    }\n    const currencyPrice = await this.contractWrapper.readContract.currencyPriceForListing(listingId, currencyContractAddress);\n    invariant(pricePerTokenInCurrency === currencyPrice, \"Currency already approved with this price.\");\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"approveCurrencyForListing\", [listingId, currencyContractAddress, pricePerTokenInCurrency])\n    };\n  }\n\n  /**\n   * Revoke approval of a currency from a listing.\n   *\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want to revoke currency for\n   * const listingId = \"0\";\n   *\n   * await contract.directListings.revokeCurrencyApprovalForListing(listingId, currencyContractAddress);\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param currencyContractAddress - Address of currency\n   */\n  async revokeCurrencyApprovalForListing(listingId, currencyContractAddress) {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    if (currencyContractAddress === listing.currencyContractAddress) {\n      throw new Error(`Can't revoke approval for main listing currency.`);\n    }\n    const currencyPrice = await this.contractWrapper.readContract.currencyPriceForListing(listingId, currencyContractAddress);\n    invariant(!currencyPrice.isZero(), \"Currency not approved.\");\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"approveCurrencyForListing\", [listingId, currencyContractAddress, BigNumber.from(0)])\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  async validateListing(listingId) {\n    try {\n      return await this.getListing(listingId);\n    } catch (err) {\n      console.error(`Error getting the listing with id ${listingId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction listing to the direct listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapListing(listing) {\n    let status = Status.UNSET;\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    switch (listing.status) {\n      case 1:\n        status = BigNumber.from(listing.startTimestamp).gt(blockTime) ? Status.Created : BigNumber.from(listing.endTimestamp).lt(blockTime) ? Status.Expired : Status.Active;\n        break;\n      case 2:\n        status = Status.Completed;\n        break;\n      case 3:\n        status = Status.Cancelled;\n        break;\n    }\n    return {\n      assetContractAddress: listing.assetContract,\n      currencyContractAddress: listing.currency,\n      pricePerToken: listing.pricePerToken.toString(),\n      currencyValuePerToken: await fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currency, listing.pricePerToken),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId.toString(),\n      quantity: listing.quantity.toString(),\n      startTimeInSeconds: BigNumber.from(listing.startTimestamp).toNumber(),\n      asset: await fetchTokenMetadataForContract(listing.assetContract, this.contractWrapper.getProvider(), listing.tokenId, this.storage),\n      endTimeInSeconds: BigNumber.from(listing.endTimestamp).toNumber(),\n      creatorAddress: listing.listingCreator,\n      isReservedListing: listing.reserved,\n      status: status\n    };\n  }\n\n  /**\n   * Use this method to check if a direct listing is still valid.\n   *\n   * Ways a direct listing can become invalid:\n   * 1. The asset holder transferred the asset to another wallet\n   * 2. The asset holder burned the asset\n   * 3. The asset holder removed the approval on the marketplace\n   *\n   * @internal\n   * @param listing - The listing to check.\n   * @returns - True if the listing is valid, false otherwise.\n   */\n  async isStillValidListing(listing, quantity) {\n    const approved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), listing.assetContractAddress, listing.tokenId, listing.creatorAddress);\n    if (!approved) {\n      return {\n        valid: false,\n        error: `Token '${listing.tokenId}' from contract '${listing.assetContractAddress}' is not approved for transfer`\n      };\n    }\n    const provider = this.contractWrapper.getProvider();\n    const erc165 = new Contract(listing.assetContractAddress, ERC165Abi, provider);\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n    const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n    if (isERC721) {\n      const asset = new Contract(listing.assetContractAddress, Erc721Abi, provider);\n      const valid = (await asset.ownerOf(listing.tokenId)).toLowerCase() === listing.creatorAddress.toLowerCase();\n      return {\n        valid,\n        error: valid ? undefined : `Seller is not the owner of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} anymore'`\n      };\n    } else if (isERC1155) {\n      const asset = new Contract(listing.assetContractAddress, Erc1155Abi, provider);\n      const balance = await asset.balanceOf(listing.creatorAddress, listing.tokenId);\n      const valid = balance.gte(quantity || listing.quantity);\n      return {\n        valid,\n        error: valid ? undefined : `Seller does not have enough balance of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} to fulfill the listing`\n      };\n    } else {\n      return {\n        valid: false,\n        error: \"Contract does not implement ERC 1155 or ERC 721.\"\n      };\n    }\n  }\n  applyFilter(listings, filter) {\n    let rawListings = [...listings];\n    if (filter) {\n      if (filter.seller) {\n        rawListings = rawListings.filter(seller => seller.listingCreator.toString().toLowerCase() === filter?.seller?.toString().toLowerCase());\n      }\n      if (filter.tokenContract) {\n        rawListings = rawListings.filter(tokenContract => tokenContract.assetContract.toString().toLowerCase() === filter?.tokenContract?.toString().toLowerCase());\n      }\n      if (filter.tokenId !== undefined) {\n        rawListings = rawListings.filter(tokenContract => tokenContract.tokenId.toString() === filter?.tokenId?.toString());\n      }\n    }\n    return filter?.count && filter.count < rawListings.length ? rawListings.slice(0, filter.count) : rawListings;\n  }\n}\n\n/**\n * @internal\n */\nconst EnglishAuctionInputParamsSchema = z.object({\n  /**\n   * The address of the asset being auctioned.\n   */\n  assetContractAddress: AddressSchema,\n  /**\n   * The ID of the token to auction.\n   */\n  tokenId: BigNumberishSchema,\n  /**\n   * The quantity of tokens to include in the listing.\n   *\n   * For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n   */\n  quantity: BigNumberishSchema.default(1),\n  /**\n   * The address of the currency to accept for the listing.\n   */\n  currencyContractAddress: AddressSchema.default(NATIVE_TOKEN_ADDRESS),\n  /**\n   * The minimum price that a bid must be in order to be accepted.\n   */\n  minimumBidAmount: AmountSchema,\n  /**\n   * The buyout price of the auction.\n   */\n  buyoutBidAmount: AmountSchema,\n  /**\n   * This is a buffer e.g. x seconds.\n   *\n   * If a new winning bid is made less than x seconds before expirationTimestamp, the\n   * expirationTimestamp is increased by x seconds.\n   */\n  timeBufferInSeconds: BigNumberishSchema.default(900),\n  // 15 minutes by default\n\n  /**\n   * This is a buffer in basis points e.g. x%.\n   *\n   * To be considered as a new winning bid, a bid must be at least x% greater than\n   * the current winning bid.\n   */\n  bidBufferBps: BigNumberishSchema.default(500),\n  // 5% by default\n\n  /**\n   * The start time of the auction.\n   */\n  startTimestamp: RawDateSchema.default(new Date()),\n  /**\n   * The end time of the auction.\n   */\n  endTimestamp: EndDateSchema\n});\n\n/**\n * @public\n */\n\n/**\n * Handles auctions\n * @public\n */\nclass MarketplaceV3EnglishAuctions {\n  // utilities\n\n  constructor(contractWrapper, storage) {\n    _defineProperty(this, \"featureName\", FEATURE_ENGLISH_AUCTIONS.name);\n    _defineProperty(this, \"contractWrapper\", void 0);\n    _defineProperty(this, \"storage\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.events = new ContractEvents(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total number of english auctions.\n   * @returns Returns the total number of auctions created.\n   * @public\n   *\n   * @example\n   * ```javascript\n   * const totalAuctions = await contract.englishAuctions.getTotalCount();\n   * ```\n   */\n  async getTotalCount() {\n    return await this.contractWrapper.readContract.totalAuctions();\n  }\n\n  /**\n   * Get all auctions.\n   *\n   * @example\n   * ```javascript\n   * const auctions = await contract.englishAuctions.getAll();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Auction object array\n   */\n  async getAll(filter) {\n    const totalAuctions = await this.getTotalCount();\n    let start = BigNumber.from(filter?.start || 0).toNumber();\n    let end = totalAuctions.toNumber();\n    if (end === 0) {\n      throw new Error(`No auctions exist on the contract.`);\n    }\n    let rawAuctions = [];\n    let batches = await getAllInBatches(start, end, this.contractWrapper.readContract.getAllAuctions);\n    rawAuctions = batches.flat();\n    const filteredAuctions = this.applyFilter(rawAuctions, filter);\n    return await Promise.all(filteredAuctions.map(auction => this.mapAuction(auction)));\n  }\n\n  /**\n   * Get all valid auctions.\n   *\n   * @example\n   * ```javascript\n   * const auctions = await contract.englishAuctions.getAllValid();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Auction object array\n   */\n  async getAllValid(filter) {\n    const totalAuctions = await this.getTotalCount();\n    let start = BigNumber.from(filter?.start || 0).toNumber();\n    let end = totalAuctions.toNumber();\n    if (end === 0) {\n      throw new Error(`No auctions exist on the contract.`);\n    }\n    let rawAuctions = [];\n    let batches = await getAllInBatches(start, end, this.contractWrapper.readContract.getAllValidAuctions);\n    rawAuctions = batches.flat();\n    const filteredAuctions = this.applyFilter(rawAuctions, filter);\n    return await Promise.all(filteredAuctions.map(auction => this.mapAuction(auction)));\n  }\n\n  /**\n   * Get an Auction by id.\n   *\n   * @example\n   * ```javascript\n   * const auctionId = 0;\n   * const auction = await contract.englishAuctions.getAuction(auctionId);\n   * ```\n   *\n   * @param auctionId - the auction Id\n   * @returns the Auction object\n   */\n  async getAuction(auctionId) {\n    const auction = await this.contractWrapper.readContract.getAuction(auctionId);\n    return await this.mapAuction(auction);\n  }\n\n  /**\n   * Get Highest Bid\n   *\n   * @remarks Get the current highest bid of an active auction.\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction\n   * const auctionId = 0;\n   *\n   * contract.englishAuctions.\n   *   .getWinningBid(auctionId)\n   *   .then((bid) => console.log(bid))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  async getWinningBid(auctionId) {\n    await this.validateAuction(BigNumber.from(auctionId));\n    const bid = await this.contractWrapper.readContract.getWinningBid(auctionId);\n    if (bid._bidder === constants.AddressZero) {\n      return undefined;\n    }\n    return await this.mapBid(auctionId.toString(), bid._bidder, bid._currency, bid._bidAmount.toString());\n  }\n\n  /**\n   * Check if a bid-amount is/will be a winning bid.\n   *\n   * @param auctionId - Auction Id\n   * @param bidAmount - Amount to bid\n   * @returns the Auction object\n   */\n  async isWinningBid(auctionId, bidAmount) {\n    return await this.contractWrapper.readContract.isNewWinningBid(auctionId, bidAmount);\n  }\n\n  /**\n   * Get Auction Winner\n   *\n   * @remarks Get the winner of the auction after an auction ends.\n   *\n   * @example\n   * ```javascript\n   * // The auction ID of the auction that closed\n   * const auctionId = 0;\n   *\n   * contract.englishAuctions.\n   *   .getWinner(auctionId)\n   *   .then((auctionWinner) => console.log(auctionWinner))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  async getWinner(auctionId) {\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    const bid = await this.contractWrapper.readContract.getWinningBid(auctionId);\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    const endTime = BigNumber.from(auction.endTimeInSeconds);\n\n    // if we have a winner in the map and the current time is past the endtime of the auction return the address of the winner\n    if (now.gt(endTime) && bid._bidder !== constants.AddressZero) {\n      return bid._bidder;\n    }\n    // otherwise fall back to query filter things\n\n    // TODO this should be via indexer or direct contract call\n    const closedAuctions = await this.contractWrapper.readContract.queryFilter(this.contractWrapper.readContract.filters.AuctionClosed());\n    const closed = closedAuctions.find(a => a.args.auctionId.eq(BigNumber.from(auctionId)));\n    if (!closed) {\n      throw new Error(`Could not find auction with ID ${auctionId} in closed auctions`);\n    }\n    return closed.args.winningBidder;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Auction\n   *\n   * @remarks Create a new auction where people can bid on an asset.\n   *\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract of the asset you want to auction\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to auction\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to auction\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the auctioned tokens\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // the minimum bid that will be accepted for the token\n   *   minimumBidAmount: \"1.5\",\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutBidAmount: \"10\",\n   *   // If a bid is made less than these many seconds before expiration, the expiration time is increased by this.\n   *   timeBufferInSeconds: \"900\", // 15 minutes by default\n   *   // A bid must be at least this much bps greater than the current winning bid\n   *   bidBufferBps: \"500\", // 5% by default\n   *   // when should the auction open up for bidding\n   *   startTimestamp: new Date(Date.now()),\n   *   // end time of auction\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   * }\n   *\n   * const tx = await contract.englishAuctions.createAuction(auction);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created auction\n   * ```\n   */\n  async createAuction(auction) {\n    const parsedAuction = EnglishAuctionInputParamsSchema.parse(auction);\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), parsedAuction.assetContractAddress, parsedAuction.tokenId, await this.contractWrapper.getSignerAddress());\n    const normalizedBuyoutAmount = await normalizePriceValue(this.contractWrapper.getProvider(), parsedAuction.buyoutBidAmount, parsedAuction.currencyContractAddress);\n    const normalizedMinBidAmount = await normalizePriceValue(this.contractWrapper.getProvider(), parsedAuction.minimumBidAmount, parsedAuction.currencyContractAddress);\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    if (parsedAuction.startTimestamp.lt(blockTime)) {\n      parsedAuction.startTimestamp = BigNumber.from(blockTime);\n    }\n    const receipt = await this.contractWrapper.sendTransaction(\"createAuction\", [{\n      assetContract: parsedAuction.assetContractAddress,\n      tokenId: parsedAuction.tokenId,\n      quantity: parsedAuction.quantity,\n      currency: cleanCurrencyAddress(parsedAuction.currencyContractAddress),\n      minimumBidAmount: normalizedMinBidAmount,\n      buyoutBidAmount: normalizedBuyoutAmount,\n      timeBufferInSeconds: parsedAuction.timeBufferInSeconds,\n      bidBufferBps: parsedAuction.bidBufferBps,\n      startTimestamp: parsedAuction.startTimestamp,\n      endTimestamp: parsedAuction.endTimestamp\n    }], {\n      // Higher gas limit for create auction\n      gasLimit: 500000\n    });\n    const event = this.contractWrapper.parseLogs(\"NewAuction\", receipt?.logs);\n    return {\n      id: event[0].args.auctionId,\n      receipt\n    };\n  }\n\n  /**\n   * Buyout Auction\n   *\n   * @remarks Buy a specific auction from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The auction ID of the asset you want to buy\n   * const auctionId = 0;\n   *\n   * await contract.englishAuctions.buyoutAuction(auctionId);\n   * ```\n   */\n  async buyoutAuction(auctionId) {\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    const currencyMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), auction.currencyContractAddress);\n    return this.makeBid(auctionId, ethers.utils.formatUnits(auction.buyoutBidAmount, currencyMetadata.decimals));\n  }\n\n  /**\n   * Bid On Auction\n   *\n   * @remarks Make a bid on an auction\n   *\n   * @example\n   * ```javascript\n   * // The auction ID of the asset you want to bid on\n   * const auctionId = 0;\n   * // The total amount you are willing to bid for auctioned tokens\n   * const bidAmount = 1;\n   *\n   * await contract.englishAuctions.makeBid(auctionId, bidAmount);\n   * ```\n   */\n  async makeBid(auctionId, bidAmount) {\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    const normalizedBidAmount = await normalizePriceValue(this.contractWrapper.getProvider(), bidAmount, auction.currencyContractAddress);\n    if (normalizedBidAmount.eq(BigNumber.from(0))) {\n      throw new Error(\"Cannot make a bid with 0 value\");\n    }\n    if (BigNumber.from(auction.buyoutBidAmount).gt(0) && normalizedBidAmount.gt(auction.buyoutBidAmount)) {\n      throw new Error(\"Bid amount must be less than or equal to buyoutBidAmount\");\n    }\n    const winningBid = await this.getWinningBid(auctionId);\n    if (winningBid) {\n      const isWinnner = await this.isWinningBid(auctionId, normalizedBidAmount);\n      invariant(isWinnner, \"Bid price is too low based on the current winning bid and the bid buffer\");\n    } else {\n      const tokenPrice = normalizedBidAmount;\n      const minimumBidAmount = BigNumber.from(auction.minimumBidAmount);\n      invariant(tokenPrice.gte(minimumBidAmount), \"Bid price is too low based on minimum bid amount\");\n    }\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(this.contractWrapper, normalizedBidAmount, auction.currencyContractAddress, overrides);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"bidInAuction\", [auctionId, normalizedBidAmount], overrides)\n    };\n  }\n\n  /**\n   * Cancel Auction\n   *\n   * @remarks Cancel an auction on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction you want to cancel\n   * const auctionId = \"0\";\n   *\n   * await contract.englishAuctions.cancelAuction(auctionId);\n   * ```\n   */\n  async cancelAuction(auctionId) {\n    const winningBid = await this.getWinningBid(auctionId);\n    if (winningBid) {\n      throw new Error(`Bids already made.`);\n    }\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"cancelAuction\", [auctionId])\n    };\n  }\n\n  /**\n   * Close the Auction for the buyer\n   *\n   * @remarks Closes the Auction and executes the sale for the buyer.\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction you want to close\n   * const auction = \"0\";\n   * await contract.englishAuctions.closeAuctionForBidder(auctionId);\n   * ```\n   *\n   * @param auctionId - the auction id to close\n   * @param closeFor - optionally pass the winning bid offeror address to close the auction on their behalf\n   */\n  async closeAuctionForBidder(auctionId, closeFor) {\n    if (!closeFor) {\n      closeFor = await this.contractWrapper.getSignerAddress();\n    }\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    try {\n      return {\n        receipt: await this.contractWrapper.sendTransaction(\"collectAuctionTokens\", [BigNumber.from(auctionId)])\n      };\n    } catch (err) {\n      if (err.message.includes(\"Marketplace: auction still active.\")) {\n        throw new AuctionHasNotEndedError(auctionId.toString(), auction.endTimeInSeconds.toString());\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * Close the Auction for the seller, i.e. the auction creator\n   *\n   * @remarks Closes the Auction and executes the sale for the seller.\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction you want to close\n   * const auctionId = \"0\";\n   * await contract.englishAuctions.closeAuctionForSeller(auctionId);\n   * ```\n   *\n   * @param auctionId - the auction id to close\n   */\n  async closeAuctionForSeller(auctionId) {\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    try {\n      return {\n        receipt: await this.contractWrapper.sendTransaction(\"collectAuctionPayout\", [BigNumber.from(auctionId)])\n      };\n    } catch (err) {\n      if (err.message.includes(\"Marketplace: auction still active.\")) {\n        throw new AuctionHasNotEndedError(auctionId.toString(), auction.endTimeInSeconds.toString());\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * Execute the Auction Sale\n   *\n   * @remarks Closes the Auction and executes the sale for both parties.\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction you want to close\n   * const auction = \"0\";\n   * await contract.englishAuctions.executeSale(auctionId);\n   * ```\n   *\n   * @param auctionId - the auction to close\n   */\n  async executeSale(auctionId) {\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    try {\n      const winningBid = await this.getWinningBid(auctionId);\n      invariant(winningBid, \"No winning bid found\");\n      const closeForSeller = this.encoder.encode(\"collectAuctionPayout\", [auctionId]);\n      const closeForBuyer = this.encoder.encode(\"collectAuctionTokens\", [auctionId]);\n      return await this.contractWrapper.multiCall([closeForSeller, closeForBuyer]);\n    } catch (err) {\n      if (err.message.includes(\"Marketplace: auction still active.\")) {\n        throw new AuctionHasNotEndedError(auctionId.toString(), auction.endTimeInSeconds.toString());\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * Get the buffer in basis points between bids for an auction.\n   *\n   * @param auctionId - id of the auction\n   */\n  async getBidBufferBps(auctionId) {\n    return (await this.getAuction(auctionId)).bidBufferBps;\n  }\n\n  /**\n   * returns the minimum bid a user can place to outbid the previous highest bid\n   * @param auctionId - id of the auction\n   */\n  async getMinimumNextBid(auctionId) {\n    // we can fetch all of these at the same time using promise.all\n    const [currentBidBufferBps, winningBid, auction] = await Promise.all([this.getBidBufferBps(auctionId), this.getWinningBid(auctionId), await this.validateAuction(BigNumber.from(auctionId))]);\n    const currentBidOrReservePrice = winningBid ?\n    // if there is a winning bid use the value of it\n    BigNumber.from(winningBid.bidAmount) :\n    // if there is no winning bid use the reserve price\n    BigNumber.from(auction.minimumBidAmount);\n    const minimumNextBid = currentBidOrReservePrice.add(\n    // the addition of the current bid and the buffer\n    // (have to divide by 10000 to get the fraction of the buffer (since it's in basis points))\n    currentBidOrReservePrice.mul(currentBidBufferBps).div(10000));\n\n    // it's more useful to return a currency value here\n    return fetchCurrencyValue(this.contractWrapper.getProvider(), auction.currencyContractAddress, minimumNextBid);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if auction could not be found\n   *\n   * @param auctionId - Auction to check for\n   */\n  async validateAuction(auctionId) {\n    try {\n      return await this.getAuction(auctionId);\n    } catch (err) {\n      console.error(`Error getting the auction with id ${auctionId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction to the auction interface.\n   *\n   * @internal\n   * @param auction - The auction to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapAuction(auction) {\n    let status = Status.UNSET;\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    switch (auction.status) {\n      case 1:\n        status = BigNumber.from(auction.startTimestamp).gt(blockTime) ? Status.Created : BigNumber.from(auction.endTimestamp).lt(blockTime) ? Status.Expired : Status.Active;\n        break;\n      case 2:\n        status = Status.Completed;\n        break;\n      case 3:\n        status = Status.Cancelled;\n        break;\n    }\n    return {\n      id: auction.auctionId.toString(),\n      creatorAddress: auction.auctionCreator,\n      assetContractAddress: auction.assetContract,\n      tokenId: auction.tokenId.toString(),\n      quantity: auction.quantity.toString(),\n      currencyContractAddress: auction.currency,\n      minimumBidAmount: auction.minimumBidAmount.toString(),\n      minimumBidCurrencyValue: await fetchCurrencyValue(this.contractWrapper.getProvider(), auction.currency, auction.minimumBidAmount),\n      buyoutBidAmount: auction.buyoutBidAmount.toString(),\n      buyoutCurrencyValue: await fetchCurrencyValue(this.contractWrapper.getProvider(), auction.currency, auction.buyoutBidAmount),\n      timeBufferInSeconds: BigNumber.from(auction.timeBufferInSeconds).toNumber(),\n      bidBufferBps: BigNumber.from(auction.bidBufferBps).toNumber(),\n      startTimeInSeconds: BigNumber.from(auction.startTimestamp).toNumber(),\n      endTimeInSeconds: BigNumber.from(auction.endTimestamp).toNumber(),\n      asset: await fetchTokenMetadataForContract(auction.assetContract, this.contractWrapper.getProvider(), auction.tokenId, this.storage),\n      status: status\n    };\n  }\n\n  /**\n   * Maps an auction-bid to the strict interface\n   *\n   * @internal\n   * @param bid\n   * @returns - A `Bid` object\n   */\n  async mapBid(auctionId, bidderAddress, currencyContractAddress, bidAmount) {\n    return {\n      auctionId,\n      bidderAddress,\n      currencyContractAddress,\n      bidAmount,\n      bidAmountCurrencyValue: await fetchCurrencyValue(this.contractWrapper.getProvider(), currencyContractAddress, bidAmount)\n    };\n  }\n  applyFilter(auctions, filter) {\n    let rawAuctions = [...auctions];\n    if (filter) {\n      if (filter.seller) {\n        rawAuctions = rawAuctions.filter(seller => seller.auctionCreator.toString().toLowerCase() === filter?.seller?.toString().toLowerCase());\n      }\n      if (filter.tokenContract) {\n        rawAuctions = rawAuctions.filter(tokenContract => tokenContract.assetContract.toString().toLowerCase() === filter?.tokenContract?.toString().toLowerCase());\n      }\n      if (filter.tokenId !== undefined) {\n        rawAuctions = rawAuctions.filter(tokenContract => tokenContract.tokenId.toString() === filter?.tokenId?.toString());\n      }\n    }\n    return filter?.count && filter.count < rawAuctions.length ? rawAuctions.slice(0, filter.count) : rawAuctions;\n  }\n}\n\n/**\n * @internal\n */\nconst OfferInputParamsSchema = z.object({\n  /**\n   * The address of the asset being sought.\n   */\n  assetContractAddress: AddressSchema,\n  /**\n   * The ID of the token.\n   */\n  tokenId: BigNumberishSchema,\n  /**\n   * The quantity of tokens to buy.\n   *\n   * For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n   */\n  quantity: BigNumberishSchema.default(1),\n  /**\n   * The address of the currency offered for the NFTs.\n   */\n  currencyContractAddress: AddressSchema.default(NATIVE_TOKEN_ADDRESS),\n  /**\n   * The total offer amount for the NFTs.\n   */\n  totalPrice: AmountSchema,\n  /**\n   * The end time of the offer.\n   */\n  endTimestamp: EndDateSchema\n});\n\n/**\n * @public\n */\n\n/**\n * Handles marketplace offers\n * @public\n */\nclass MarketplaceV3Offers {\n  // utilities\n\n  constructor(contractWrapper, storage) {\n    _defineProperty(this, \"featureName\", FEATURE_OFFERS.name);\n    _defineProperty(this, \"contractWrapper\", void 0);\n    _defineProperty(this, \"storage\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.events = new ContractEvents(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total number of offers\n   * @returns Returns the total number of offers created.\n   * @public\n   *\n   * @example\n   * ```javascript\n   * const totalOffers = await contract.offers.getTotalCount();\n   * ```\n   */\n  async getTotalCount() {\n    return await this.contractWrapper.readContract.totalOffers();\n  }\n\n  /**\n   * Get all offers.\n   *\n   * @example\n   * ```javascript\n   * const offers = await contract.offers.getAll();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Offer object array\n   */\n  async getAll(filter) {\n    const totalOffers = await this.getTotalCount();\n    let start = BigNumber.from(filter?.start || 0).toNumber();\n    let end = totalOffers.toNumber();\n    if (end === 0) {\n      throw new Error(`No offers exist on the contract.`);\n    }\n    let rawOffers = [];\n    let batches = await getAllInBatches(start, end, this.contractWrapper.readContract.getAllOffers);\n    rawOffers = batches.flat();\n    const filteredOffers = this.applyFilter(rawOffers, filter);\n    return await Promise.all(filteredOffers.map(offer => this.mapOffer(offer)));\n  }\n\n  /**\n   * Get all valid offers.\n   *\n   * @example\n   * ```javascript\n   * const offers = await contract.offers.getAllValid();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Offer object array\n   */\n  async getAllValid(filter) {\n    const totalOffers = await this.getTotalCount();\n    let start = BigNumber.from(filter?.start || 0).toNumber();\n    let end = totalOffers.toNumber();\n    if (end === 0) {\n      throw new Error(`No offers exist on the contract.`);\n    }\n    let rawOffers = [];\n    let batches = await getAllInBatches(start, end, this.contractWrapper.readContract.getAllValidOffers);\n    rawOffers = batches.flat();\n    const filteredOffers = this.applyFilter(rawOffers, filter);\n    return await Promise.all(filteredOffers.map(offer => this.mapOffer(offer)));\n  }\n\n  /**\n   * Get a offer by id\n   *\n   * @example\n   * ```javascript\n   * const offerId = 0;\n   * const offer = await contract.offers.getOffer(offerId);\n   * ```\n   *\n   * @param offerId - the listing id\n   * @returns the Direct listing object\n   */\n  async getOffer(offerId) {\n    const offer = await this.contractWrapper.readContract.getOffer(offerId);\n    return await this.mapOffer(offer);\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Make Offer\n   *\n   * @remarks Make an offer on the marketplace for an asset.\n   *\n   * @example\n   * ```javascript\n   * // Data of the offer you want to make\n   * const offer = {\n   *   // address of the contract the asset you want to make an offer for\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to buy\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to buy\n   *   quantity: 1,\n   *   // address of the currency contract that you offer to pay in\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // Total price you offer to pay for the mentioned token(s)\n   *   totalPrice: \"1.5\",\n   *   // Offer valid until\n   *   endTimestamp: new Date(),\n   * }\n   *\n   * const tx = await contract.offers.makeOffer(offer);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created offer\n   * ```\n   */\n  async makeOffer(offer) {\n    const parsedOffer = OfferInputParamsSchema.parse(offer);\n    const chainId = await this.contractWrapper.getChainID();\n    const currency = isNativeToken(parsedOffer.currencyContractAddress) ? NATIVE_TOKENS[chainId].wrapped.address : parsedOffer.currencyContractAddress;\n    const normalizedTotalPrice = await normalizePriceValue(this.contractWrapper.getProvider(), parsedOffer.totalPrice, currency);\n    const overrides = await this.contractWrapper.getCallOverrides();\n    await setErc20Allowance(this.contractWrapper, normalizedTotalPrice, currency, overrides);\n    const receipt = await this.contractWrapper.sendTransaction(\"makeOffer\", [{\n      assetContract: parsedOffer.assetContractAddress,\n      tokenId: parsedOffer.tokenId,\n      quantity: parsedOffer.quantity,\n      currency: currency,\n      totalPrice: normalizedTotalPrice,\n      expirationTimestamp: parsedOffer.endTimestamp\n    }], {\n      // Higher gas limit for create listing\n      gasLimit: 500000\n    });\n    const event = this.contractWrapper.parseLogs(\"NewOffer\", receipt?.logs);\n    return {\n      id: event[0].args.offerId,\n      receipt\n    };\n  }\n\n  /**\n   * Cancel Offer\n   *\n   * @remarks Cancel an offer on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The ID of the offer you want to cancel\n   * const offerId = \"0\";\n   *\n   * await contract.offers.cancelOffer(offerId);\n   * ```\n   */\n  async cancelOffer(offerId) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"cancelOffer\", [offerId])\n    };\n  }\n\n  /**\n   * Accept an offer\n   *\n   * @example\n   * ```javascript\n   * // The ID of the offer you want to accept\n   * const offerId = 0;\n   *\n   * await contract.offers.acceptOffer(offerId);\n   * ```\n   *\n   * @param offerId - The offer id\n   */\n  async acceptOffer(offerId) {\n    const offer = await this.validateOffer(BigNumber.from(offerId));\n    const {\n      valid,\n      error\n    } = await this.isStillValidOffer(offer);\n    if (!valid) {\n      throw new Error(`Offer ${offerId} is no longer valid. ${error}`);\n    }\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), offer.assetContractAddress, offer.tokenId, await this.contractWrapper.getSignerAddress());\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"acceptOffer\", [offerId], overrides)\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if offer could not be found\n   *\n   * @param offerId - offer to check for\n   */\n  async validateOffer(offerId) {\n    try {\n      return await this.getOffer(offerId);\n    } catch (err) {\n      console.error(`Error getting the offer with id ${offerId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the offer to the offer interface.\n   *\n   * @internal\n   * @param offer - The offer to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapOffer(offer) {\n    let status = Status.UNSET;\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    switch (offer.status) {\n      case 1:\n        status = BigNumber.from(offer.expirationTimestamp).lt(blockTime) ? Status.Expired : Status.Active;\n        break;\n      case 2:\n        status = Status.Completed;\n        break;\n      case 3:\n        status = Status.Cancelled;\n        break;\n    }\n    return {\n      id: offer.offerId.toString(),\n      offerorAddress: offer.offeror,\n      assetContractAddress: offer.assetContract,\n      currencyContractAddress: offer.currency,\n      tokenId: offer.tokenId.toString(),\n      quantity: offer.quantity.toString(),\n      totalPrice: offer.totalPrice.toString(),\n      currencyValue: await fetchCurrencyValue(this.contractWrapper.getProvider(), offer.currency, offer.totalPrice),\n      asset: await fetchTokenMetadataForContract(offer.assetContract, this.contractWrapper.getProvider(), offer.tokenId, this.storage),\n      endTimeInSeconds: BigNumber.from(offer.expirationTimestamp).toNumber(),\n      status: status\n    };\n  }\n\n  /**\n   * Use this method to check if an offer is still valid.\n   *\n   * Ways an offer can become invalid:\n   * 1. The offer has expired\n   * 2. The offeror doesn't have enough balance of currency tokens\n   * 3. The offeror removed the approval of currency tokens on the marketplace\n   *\n   * @internal\n   * @param offer - The offer to check.\n   * @returns - True if the offer is valid, false otherwise.\n   */\n  async isStillValidOffer(offer) {\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    if (now.gt(offer.endTimeInSeconds)) {\n      return {\n        valid: false,\n        error: `Offer with ID ${offer.id} has expired`\n      };\n    }\n    const chainId = await this.contractWrapper.getChainID();\n    const currency = isNativeToken(offer.currencyContractAddress) ? NATIVE_TOKENS[chainId].wrapped.address : offer.currencyContractAddress;\n    const provider = this.contractWrapper.getProvider();\n    const erc20 = new ContractWrapper(provider, currency, ERC20Abi, {});\n    const offerorBalance = await erc20.readContract.balanceOf(offer.offerorAddress);\n    if (offerorBalance.lt(offer.totalPrice)) {\n      return {\n        valid: false,\n        error: `Offeror ${offer.offerorAddress} doesn't have enough balance of token ${currency}`\n      };\n    }\n    const offerorAllowance = await erc20.readContract.allowance(offer.offerorAddress, this.getAddress());\n    if (offerorAllowance.lt(offer.totalPrice)) {\n      return {\n        valid: false,\n        error: `Offeror ${offer.offerorAddress} hasn't approved enough amount of token ${currency}`\n      };\n    }\n    return {\n      valid: true,\n      error: \"\"\n    };\n  }\n  applyFilter(offers, filter) {\n    let rawOffers = [...offers];\n    if (filter) {\n      if (filter.offeror) {\n        rawOffers = rawOffers.filter(offeror => offeror.offeror.toString().toLowerCase() === filter?.offeror?.toString().toLowerCase());\n      }\n      if (filter.tokenContract) {\n        rawOffers = rawOffers.filter(tokenContract => tokenContract.assetContract.toString().toLowerCase() === filter?.tokenContract?.toString().toLowerCase());\n      }\n      if (filter.tokenId !== undefined) {\n        rawOffers = rawOffers.filter(tokenContract => tokenContract.tokenId.toString() === filter?.tokenId?.toString());\n      }\n    }\n    return filter?.count && filter.count < rawOffers.length ? rawOffers.slice(0, filter.count) : rawOffers;\n  }\n}\n\n/**\n * Create your own whitelabel marketplace that enables users to buy and sell any digital assets.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"marketplace\");\n * ```\n *\n * @public\n */\nclass MarketplaceV3 {\n  /**\n   * @internal\n   */\n\n  /**\n   * Direct listings\n   * @remarks Create and manage direct listings in your marketplace.\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // The price to pay per unit of NFTs listed.\n   *   pricePerToken: 1.5,\n   *   // when should the listing open up for offers\n   *   startTimestamp: new Date(Date.now()),\n   *   // how long the listing will be open for\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   *   // Whether the listing is reserved for a specific set of buyers.\n   *   isReservedListing: false\n   * }\n   *\n   * const tx = await contract.directListings.createListing(listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   *\n   * // And on the buyers side:\n   * // The ID of the listing you want to buy from\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await contract.directListings.buyFromListing(listingId, quantityDesired);\n   * ```\n   */\n  get directListings() {\n    return assertEnabled(this.detectDirectListings(), FEATURE_DIRECT_LISTINGS);\n  }\n  /**\n   * Auctions\n   * @remarks Create and manage auctions in your marketplace.\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract of the asset you want to auction\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to auction\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to auction\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the auctioned tokens\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // the minimum bid that will be accepted for the token\n   *   minimumBidAmount: \"1.5\",\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutBidAmount: \"10\",\n   *   // If a bid is made less than these many seconds before expiration, the expiration time is increased by this.\n   *   timeBufferInSeconds: \"1000\",\n   *   // A bid must be at least this much bps greater than the current winning bid\n   *   bidBufferBps: \"100\", // 100 bps stands for 1%\n   *   // when should the auction open up for bidding\n   *   startTimestamp: new Date(Date.now()),\n   *   // end time of auction\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   * }\n   *\n   * const tx = await contract.englishAuctions.createAuction(auction);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created auction\n   *\n   * // And on the buyers side:\n   * // The auction ID of the asset you want to bid on\n   * const auctionId = 0;\n   * // The total amount you are willing to bid for auctioned tokens\n   * const bidAmount = 1;\n   *\n   * await contract.englishAuctions.makeBid(auctionId, bidAmount);\n   * ```\n   */\n  get englishAuctions() {\n    return assertEnabled(this.detectEnglishAuctions(), FEATURE_ENGLISH_AUCTIONS);\n  }\n\n  /**\n   * Offers\n   * @remarks Make and manage offers.\n   * @example\n   * ```javascript\n   * // Data of the offer you want to make\n   * const offer = {\n   *   // address of the contract the asset you want to make an offer for\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to buy\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to buy\n   *   quantity: 1,\n   *   // address of the currency contract that you offer to pay in\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // Total price you offer to pay for the mentioned token(s)\n   *   totalPrice: \"1.5\",\n   *   // Offer valid until\n   *   endTimestamp: new Date(),\n   * }\n   *\n   * const tx = await contract.offers.makeOffer(offer);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created offer\n   *\n   * // And on the seller's side:\n   * // The ID of the offer you want to accept\n   * const offerId = 0;\n   * await contract.offers.acceptOffer(offerId);\n   * ```\n   */\n  get offers() {\n    return assertEnabled(this.detectOffers(), FEATURE_OFFERS);\n  }\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"contractWrapper\", void 0);\n    _defineProperty(this, \"storage\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"platformFees\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"_chainId\", void 0);\n    this._chainId = chainId;\n    this.abi = abi;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(this.contractWrapper, MarketplaceContractSchema, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, MarketplaceV3.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n\n  /** ********************\n   * FEATURE DETECTION\n   * ********************/\n\n  detectDirectListings() {\n    if (detectContractFeature(this.contractWrapper, \"DirectListings\")) {\n      return new MarketplaceV3DirectListings(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectEnglishAuctions() {\n    if (detectContractFeature(this.contractWrapper, \"EnglishAuctions\")) {\n      return new MarketplaceV3EnglishAuctions(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectOffers() {\n    if (detectContractFeature(this.contractWrapper, \"Offers\")) {\n      return new MarketplaceV3Offers(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n}\n_defineProperty(MarketplaceV3, \"contractRoles\", [\"admin\", \"lister\", \"asset\"]);\n\nexport { MarketplaceV3 };\n"],"names":["DirectListingInputParamsSchema","z","AddressSchema","BigNumberishSchema","NATIVE_TOKEN_ADDRESS","AmountSchema","RawDateSchema","EndDateSchema","MarketplaceV3DirectListings","contractWrapper","storage","_defineProperty","FEATURE_DIRECT_LISTINGS","ContractEvents","ContractEncoder","ContractInterceptor","GasCostEstimator","filter","totalListings","start","BigNumber","end","rawListings","getAllInBatches","filteredListings","listing","listingId","buyer","currency","currencyContractAddress","parsedListing","handleTokenApproval","normalizedPricePerToken","normalizePriceValue","blockTime","receipt","cleanCurrencyAddress","quantityDesired","receiver","valid","error","buyFor","quantity","value","overrides","setErc20Allowance","pricePerTokenInCurrency","invariant","currencyPrice","err","status","Status","fetchCurrencyValue","fetchTokenMetadataForContract","isTokenApprovedForTransfer","provider","erc165","Contract","ERC165Abi","isERC721","InterfaceId_IERC721","isERC1155","InterfaceId_IERC1155","Erc721Abi","Erc1155Abi","listings","seller","_a","tokenContract","EnglishAuctionInputParamsSchema","MarketplaceV3EnglishAuctions","FEATURE_ENGLISH_AUCTIONS","totalAuctions","rawAuctions","filteredAuctions","auction","auctionId","bid","constants.AddressZero","bidAmount","now","endTime","closed","a","parsedAuction","normalizedBuyoutAmount","normalizedMinBidAmount","currencyMetadata","fetchCurrencyMetadata","ethers.utils.formatUnits","normalizedBidAmount","isWinnner","tokenPrice","minimumBidAmount","closeFor","AuctionHasNotEndedError","winningBid","closeForSeller","closeForBuyer","currentBidBufferBps","currentBidOrReservePrice","minimumNextBid","bidderAddress","auctions","OfferInputParamsSchema","MarketplaceV3Offers","FEATURE_OFFERS","totalOffers","rawOffers","filteredOffers","offer","offerId","parsedOffer","chainId","isNativeToken","NATIVE_TOKENS","normalizedTotalPrice","erc20","ContractWrapper","ERC20Abi","offers","offeror","MarketplaceV3","assertEnabled","network","address","options","abi","ContractMetadata","MarketplaceContractSchema","ContractRoles","ContractPlatformFee","functionName","_len","args","_key","detectContractFeature"],"mappings":"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"}