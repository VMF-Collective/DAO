{"version":3,"file":"erc-721-standard-b90faf4d.browser.esm.6985da05.js","sources":["../../node_modules/@thirdweb-dev/sdk/dist/erc-721-standard-b90faf4d.browser.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './QueryParams-7d9473b5.browser.esm.js';\nimport { ds as buildTransactionFunction, au as Erc721, cH as resolveAddress, aV as Transaction } from './contract-metadata-88f06ef9.browser.esm.js';\n\n/**\n * Standard ERC721 NFT functions\n * @remarks Basic functionality for a ERC721 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.transfer(walletAddress, tokenId);\n * ```\n * @public\n */\nclass StandardErc721 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    _defineProperty(this, \"contractWrapper\", void 0);\n    _defineProperty(this, \"storage\", void 0);\n    _defineProperty(this, \"erc721\", void 0);\n    _defineProperty(this, \"_chainId\", void 0);\n    /**\n     * Transfer an NFT\n     *\n     * @remarks Transfer an NFT from the connected wallet to another wallet.\n     *\n     * @example\n     * ```javascript\n     * const walletAddress = \"{{wallet_address}}\";\n     * const tokenId = 0;\n     * await contract.transfer(walletAddress, tokenId);\n     * ```\n     */\n    _defineProperty(this, \"transfer\", buildTransactionFunction(async (to, tokenId) => {\n      return this.erc721.transfer.prepare(to, tokenId);\n    }));\n    /**\n     * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n     * @param operator - the operator's address\n     * @param approved - whether to approve or remove\n     *\n     * @internal\n     */\n    _defineProperty(this, \"setApprovalForAll\", buildTransactionFunction(async (operator, approved) => {\n      return this.erc721.setApprovalForAll.prepare(operator, approved);\n    }));\n    /**\n     * Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specified token.\n     * @param operator - the operator's address\n     * @param tokenId - the tokenId to give approval for\n     *\n     * @internal\n     */\n    _defineProperty(this, \"setApprovalForToken\", buildTransactionFunction(async (operator, tokenId) => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"approve\",\n        args: [await resolveAddress(operator), tokenId]\n      });\n    }));\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc721 = new Erc721(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * console.log(nfts);\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc721.getAll(queryParams);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * console.log(nfts);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async getOwned(walletAddress) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    return this.erc721.getOwned(walletAddress);\n  }\n\n  /**\n   * Get Owned Token Ids\n   * @remarks Get all the token ids of NFTs owned by a specific wallet (no metadata)\n   */\n  async getOwnedTokenIds(walletAddress) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    return this.erc721.getOwnedTokenIds(walletAddress);\n  }\n\n  /**\n   * Get total minted supply count\n   */\n  async totalSupply() {\n    return this.erc721.totalCirculatingSupply();\n  }\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc721.get(tokenId);\n  }\n\n  /**\n   * Get the current owner of a given NFT within this Contract\n   *\n   * @param tokenId - the tokenId of the NFT\n   * @returns the address of the owner\n   */\n  async ownerOf(tokenId) {\n    return this.erc721.ownerOf(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * console.log(balance);\n   * ```\n   */\n  async balanceOf(address) {\n    return this.erc721.balanceOf(address);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance() {\n    return this.erc721.balance();\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc721.isApproved(address, operator);\n  }\n}\n\nexport { StandardErc721 as S };\n"],"names":["StandardErc721","contractWrapper","storage","chainId","_defineProperty","buildTransactionFunction","to","tokenId","operator","approved","Transaction","resolveAddress","Erc721","network","queryParams","walletAddress","address"],"mappings":"qEAaA,MAAMA,CAAe,CACnB,IAAI,SAAU,CACZ,OAAO,KAAK,QACb,CACD,YAAYC,EAAiBC,EAASC,EAAS,CAC7CC,EAAgB,KAAM,kBAAmB,MAAM,EAC/CA,EAAgB,KAAM,UAAW,MAAM,EACvCA,EAAgB,KAAM,SAAU,MAAM,EACtCA,EAAgB,KAAM,WAAY,MAAM,EAaxCA,EAAgB,KAAM,WAAYC,EAAyB,MAAOC,EAAIC,IAC7D,KAAK,OAAO,SAAS,QAAQD,EAAIC,CAAO,CAChD,CAAC,EAQFH,EAAgB,KAAM,oBAAqBC,EAAyB,MAAOG,EAAUC,IAC5E,KAAK,OAAO,kBAAkB,QAAQD,EAAUC,CAAQ,CAChE,CAAC,EAQFL,EAAgB,KAAM,sBAAuBC,EAAyB,MAAOG,EAAUD,IAC9EG,EAAY,oBAAoB,CACrC,gBAAiB,KAAK,gBACtB,OAAQ,UACR,KAAM,CAAC,MAAMC,EAAeH,CAAQ,EAAGD,CAAO,CACtD,CAAO,CACF,CAAC,EACF,KAAK,gBAAkBN,EACvB,KAAK,QAAUC,EACf,KAAK,OAAS,IAAIU,EAAO,KAAK,gBAAiB,KAAK,QAAST,CAAO,EACpE,KAAK,SAAWA,CACjB,CAKD,iBAAiBU,EAAS,CACxB,KAAK,gBAAgB,uBAAuBA,CAAO,CACpD,CACD,YAAa,CACX,OAAO,KAAK,gBAAgB,aAAa,OAC1C,CAiBD,MAAM,OAAOC,EAAa,CACxB,OAAO,KAAK,OAAO,OAAOA,CAAW,CACtC,CAiBD,MAAM,SAASC,EAAe,CAC5B,OAAIA,IACFA,EAAgB,MAAMJ,EAAeI,CAAa,GAE7C,KAAK,OAAO,SAASA,CAAa,CAC1C,CAMD,MAAM,iBAAiBA,EAAe,CACpC,OAAIA,IACFA,EAAgB,MAAMJ,EAAeI,CAAa,GAE7C,KAAK,OAAO,iBAAiBA,CAAa,CAClD,CAKD,MAAM,aAAc,CAClB,OAAO,KAAK,OAAO,wBACpB,CAaD,MAAM,IAAIR,EAAS,CACjB,OAAO,KAAK,OAAO,IAAIA,CAAO,CAC/B,CAQD,MAAM,QAAQA,EAAS,CACrB,OAAO,KAAK,OAAO,QAAQA,CAAO,CACnC,CAcD,MAAM,UAAUS,EAAS,CACvB,OAAO,KAAK,OAAO,UAAUA,CAAO,CACrC,CAKD,MAAM,SAAU,CACd,OAAO,KAAK,OAAO,SACpB,CAOD,MAAM,WAAWA,EAASR,EAAU,CAClC,OAAO,KAAK,OAAO,WAAWQ,EAASR,CAAQ,CAChD,CACH"}