{"version":3,"file":"edition-drop-bfcbf317.esm.d38ff877.js","sources":["../../node_modules/@thirdweb-dev/sdk/dist/edition-drop-bfcbf317.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './QueryParams-bc2daded.esm.js';\nimport { aH as StandardErc1155, cz as ContractWrapper, ab as ContractMetadata, cA as DropErc1155ContractSchema, ac as ContractRoles, ad as ContractRoyalty, ae as ContractPrimarySale, ah as DropErc1155ClaimConditions, aM as ContractEvents, ai as DropErc1155History, aa as ContractEncoder, aL as GasCostEstimator, aO as ContractPlatformFee, aN as ContractInterceptor, aA as Erc1155, cy as PaperCheckout, aQ as ContractOwner, br as getRoleHash } from './thirdweb-checkout-28b27df7.esm.js';\nimport { constants } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport 'cross-fetch';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Router.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport 'bs58';\n\n/**\n * Setup a collection of NFTs with a customizable number of each NFT that are minted as users claim them.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"edition-drop\");\n * ```\n *\n * @public\n */\nclass EditionDrop extends StandardErc1155 {\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Configure claim conditions for each NFT\n   * @remarks Define who can claim each NFT in the edition, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   *\n   * const tokenId = 0; // the id of the NFT to set claim conditions on\n   * await contract.claimConditions.set(tokenId, claimConditions);\n   * ```\n   */\n\n  /**\n   * Checkout\n   * @remarks Create a FIAT currency checkout for your NFT drop.\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    super(contractWrapper, storage, chainId);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"sales\", void 0);\n    _defineProperty(this, \"platformFees\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"royalties\", void 0);\n    _defineProperty(this, \"claimConditions\", void 0);\n    _defineProperty(this, \"checkout\", void 0);\n    _defineProperty(this, \"history\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"erc1155\", void 0);\n    _defineProperty(this, \"owner\", void 0);\n    this.abi = abi;\n    this.metadata = new ContractMetadata(this.contractWrapper, DropErc1155ContractSchema, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, EditionDrop.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.claimConditions = new DropErc1155ClaimConditions(this.contractWrapper, this.metadata, this.storage);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.history = new DropErc1155History(this.events);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.erc1155 = new Erc1155(this.contractWrapper, this.storage, chainId);\n    this.checkout = new PaperCheckout(this.contractWrapper);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  // TODO getAllClaimerAddresses() - should be done via an indexer\n\n  /**\n   * Get All Minted NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc1155.getAll(queryParams);\n  }\n\n  /**\n   * Get Owned NFTs\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async getOwned(walletAddress) {\n    return this.erc1155.getOwned(walletAddress);\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  async getTotalCount() {\n    return this.erc1155.totalCount();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create a batch of NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   */\n  async createBatch(metadatas, options) {\n    return this.erc1155.lazyMint(metadatas, options);\n  }\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param claimData - Optional claim verification data (e.g. price, allowlist proof, etc...)\n   */\n  async getClaimTransaction(destinationAddress, tokenId, quantity) {\n    let checkERC20Allowance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    return this.erc1155.getClaimTransaction(destinationAddress, tokenId, quantity, {\n      checkERC20Allowance\n    });\n  }\n\n  /**\n   * Claim NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const tokenId = 0; // the id of the NFT you want to claim\n   * const quantity = 1; // how many NFTs you want to claim\n   *\n   * const tx = await contract.claimTo(address, tokenId, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param proofs - Array of proofs\n   *\n   * @returns - Receipt for the transaction\n   */\n  async claimTo(destinationAddress, tokenId, quantity) {\n    let checkERC20Allowance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    return this.erc1155.claimTo(destinationAddress, tokenId, quantity, {\n      checkERC20Allowance\n    });\n  }\n\n  /**\n   * Claim a token to the connected wallet\n   *\n   * @remarks See {@link EditionDrop.claimTo}\n   *\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param proofs - Array of proofs\n   *\n   * @returns - Receipt for the transaction\n   */\n  async claim(tokenId, quantity) {\n    let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const address = await this.contractWrapper.getSignerAddress();\n    return this.claimTo(address, tokenId, quantity, checkERC20Allowance);\n  }\n\n  /**\n   * Burn a specified amount of a NFT\n   *\n   * @param tokenId - the token Id to burn\n   * @param amount - amount to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.burnTokens(tokenId, amount);\n   * ```\n   */\n  async burnTokens(tokenId, amount) {\n    return this.erc1155.burn(tokenId, amount);\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n}\n_defineProperty(EditionDrop, \"contractRoles\", [\"admin\", \"minter\", \"transfer\"]);\n\nexport { EditionDrop };\n"],"names":["EditionDrop","StandardErc1155","network","address","storage","options","abi","chainId","contractWrapper","ContractWrapper","_defineProperty","ContractMetadata","DropErc1155ContractSchema","ContractRoles","ContractRoyalty","ContractPrimarySale","DropErc1155ClaimConditions","ContractEvents","DropErc1155History","ContractEncoder","GasCostEstimator","ContractPlatformFee","ContractInterceptor","Erc1155","PaperCheckout","ContractOwner","queryParams","walletAddress","getRoleHash","constants.AddressZero","metadatas","destinationAddress","tokenId","quantity","checkERC20Allowance","amount","functionName","_len","args","_key"],"mappings":"6KAsFA,MAAMA,UAAoBC,CAAgB,CAiDxC,YAAYC,EAASC,EAASC,EAAS,CACrC,IAAIC,EAAU,UAAU,OAAS,GAAK,UAAU,KAAO,OAAY,UAAU,GAAK,CAAA,EAC9EC,EAAM,UAAU,OAAS,EAAI,UAAU,GAAK,OAC5CC,EAAU,UAAU,OAAS,EAAI,UAAU,GAAK,OAChDC,EAAkB,UAAU,OAAS,GAAK,UAAU,KAAO,OAAY,UAAU,GAAK,IAAIC,EAAgBP,EAASC,EAASG,EAAKD,CAAO,EAC5I,MAAMG,EAAiBJ,EAASG,CAAO,EACvCG,EAAgB,KAAM,MAAO,MAAM,EACnCA,EAAgB,KAAM,QAAS,MAAM,EACrCA,EAAgB,KAAM,eAAgB,MAAM,EAC5CA,EAAgB,KAAM,UAAW,MAAM,EACvCA,EAAgB,KAAM,YAAa,MAAM,EACzCA,EAAgB,KAAM,SAAU,MAAM,EACtCA,EAAgB,KAAM,WAAY,MAAM,EACxCA,EAAgB,KAAM,QAAS,MAAM,EACrCA,EAAgB,KAAM,YAAa,MAAM,EACzCA,EAAgB,KAAM,kBAAmB,MAAM,EAC/CA,EAAgB,KAAM,WAAY,MAAM,EACxCA,EAAgB,KAAM,UAAW,MAAM,EACvCA,EAAgB,KAAM,cAAe,MAAM,EAC3CA,EAAgB,KAAM,UAAW,MAAM,EACvCA,EAAgB,KAAM,QAAS,MAAM,EACrC,KAAK,IAAMJ,EACX,KAAK,SAAW,IAAIK,EAAiB,KAAK,gBAAiBC,EAA2B,KAAK,OAAO,EAClG,KAAK,MAAQ,IAAIC,EAAc,KAAK,gBAAiBb,EAAY,aAAa,EAC9E,KAAK,UAAY,IAAIc,EAAgB,KAAK,gBAAiB,KAAK,QAAQ,EACxE,KAAK,MAAQ,IAAIC,EAAoB,KAAK,eAAe,EACzD,KAAK,gBAAkB,IAAIC,EAA2B,KAAK,gBAAiB,KAAK,SAAU,KAAK,OAAO,EACvG,KAAK,OAAS,IAAIC,EAAe,KAAK,eAAe,EACrD,KAAK,QAAU,IAAIC,EAAmB,KAAK,MAAM,EACjD,KAAK,QAAU,IAAIC,EAAgB,KAAK,eAAe,EACvD,KAAK,UAAY,IAAIC,EAAiB,KAAK,eAAe,EAC1D,KAAK,aAAe,IAAIC,EAAoB,KAAK,eAAe,EAChE,KAAK,YAAc,IAAIC,EAAoB,KAAK,eAAe,EAC/D,KAAK,QAAU,IAAIC,EAAQ,KAAK,gBAAiB,KAAK,QAAShB,CAAO,EACtE,KAAK,SAAW,IAAIiB,EAAc,KAAK,eAAe,EACtD,KAAK,MAAQ,IAAIC,EAAc,KAAK,eAAe,CACpD,CAKD,iBAAiBvB,EAAS,CACxB,KAAK,gBAAgB,uBAAuBA,CAAO,CACpD,CACD,YAAa,CACX,OAAO,KAAK,gBAAgB,aAAa,OAC1C,CAsBD,MAAM,OAAOwB,EAAa,CACxB,OAAO,KAAK,QAAQ,OAAOA,CAAW,CACvC,CAgBD,MAAM,SAASC,EAAe,CAC5B,OAAO,KAAK,QAAQ,SAASA,CAAa,CAC3C,CAOD,MAAM,eAAgB,CACpB,OAAO,KAAK,QAAQ,YACrB,CAKD,MAAM,sBAAuB,CAE3B,MAAO,CADmB,MAAM,KAAK,gBAAgB,aAAa,QAAQC,EAAY,UAAU,EAAGC,CAAqB,CAEzH,CAgCD,MAAM,YAAYC,EAAWzB,EAAS,CACpC,OAAO,KAAK,QAAQ,SAASyB,EAAWzB,CAAO,CAChD,CAWD,MAAM,oBAAoB0B,EAAoBC,EAASC,EAAU,CAC/D,IAAIC,EAAsB,UAAU,OAAS,GAAK,UAAU,KAAO,OAAY,UAAU,GAAK,GAC9F,OAAO,KAAK,QAAQ,oBAAoBH,EAAoBC,EAASC,EAAU,CAC7E,oBAAAC,CACN,CAAK,CACF,CAyBD,MAAM,QAAQH,EAAoBC,EAASC,EAAU,CACnD,IAAIC,EAAsB,UAAU,OAAS,GAAK,UAAU,KAAO,OAAY,UAAU,GAAK,GAC9F,OAAO,KAAK,QAAQ,QAAQH,EAAoBC,EAASC,EAAU,CACjE,oBAAAC,CACN,CAAK,CACF,CAcD,MAAM,MAAMF,EAASC,EAAU,CAC7B,IAAIC,EAAsB,UAAU,OAAS,GAAK,UAAU,KAAO,OAAY,UAAU,GAAK,GAC9F,MAAM/B,EAAU,MAAM,KAAK,gBAAgB,iBAAgB,EAC3D,OAAO,KAAK,QAAQA,EAAS6B,EAASC,EAAUC,CAAmB,CACpE,CAaD,MAAM,WAAWF,EAASG,EAAQ,CAChC,OAAO,KAAK,QAAQ,KAAKH,EAASG,CAAM,CACzC,CAKD,MAAM,KAAKC,EAAc,CACvB,QAASC,EAAO,UAAU,OAAQC,EAAO,IAAI,MAAMD,EAAO,EAAIA,EAAO,EAAI,CAAC,EAAGE,EAAO,EAAGA,EAAOF,EAAME,IAClGD,EAAKC,EAAO,GAAK,UAAUA,GAE7B,OAAO,KAAK,gBAAgB,KAAKH,EAAc,GAAGE,CAAI,CACvD,CACH,CACA5B,EAAgBV,EAAa,gBAAiB,CAAC,QAAS,SAAU,UAAU,CAAC"}