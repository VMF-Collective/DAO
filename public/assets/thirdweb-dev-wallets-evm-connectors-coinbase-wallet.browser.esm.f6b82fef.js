import{aQ as I,aF as c,aR as P,aG as w,aN as u,aM as m,aI as o,aS as E,aH as v,aT as C}from"./index.396ce416.js";import{W as _}from"./WagmiConnector-60b19604.browser.esm.56ff4d49.js";import{n as f}from"./normalizeChainId-e4cc0175.browser.esm.042707b7.js";import{U as l,C as U,A as b,S as A}from"./errors-105ad187.browser.esm.489c3290.js";var h=new WeakMap,d=new WeakMap,p=new WeakSet;class D extends _{constructor(t){let{chains:e,options:a}=t;super({chains:e,options:{reloadOnDisconnect:!1,...a}}),I(this,p),c(this,"id",P.coinbase),c(this,"name","Coinbase Wallet"),c(this,"ready",!0),w(this,h,{writable:!0,value:void 0}),w(this,d,{writable:!0,value:void 0}),c(this,"onAccountsChanged",n=>{n.length===0?this.emit("disconnect"):this.emit("change",{account:u.getAddress(n[0])})}),c(this,"onChainChanged",n=>{const i=f(n),s=this.isChainUnsupported(i);this.emit("change",{chain:{id:i,unsupported:s}})}),c(this,"onDisconnect",()=>{this.emit("disconnect")})}async connect(){let{chainId:t}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};try{const e=await this.getProvider();this.setupListeners(),this.emit("message",{type:"connecting"});const a=await e.enable(),n=u.getAddress(a[0]);let i=await this.getChainId(),s=this.isChainUnsupported(i);if(t&&i!==t)try{i=(await this.switchChain(t)).chainId,s=this.isChainUnsupported(i)}catch(r){console.error(`Connected but failed to switch to desired chain ${t}`,r)}return{account:n,chain:{id:i,unsupported:s},provider:new m(e)}}catch(e){throw/(user closed modal|accounts received is empty)/i.test(e.message)?new l(e):e}}async disconnect(){if(!o(this,d))return;const t=await this.getProvider();t.removeListener("accountsChanged",this.onAccountsChanged),t.removeListener("chainChanged",this.onChainChanged),t.removeListener("disconnect",this.onDisconnect),t.disconnect(),t.close()}async getAccount(){const e=await(await this.getProvider()).request({method:"eth_accounts"});if(e.length===0)throw new Error("No accounts found");return u.getAddress(e[0])}async getChainId(){const t=await this.getProvider();return f(t.chainId)}async getProvider(){var t;if(!o(this,d)){let e=(await E(()=>import("./index.eb64e36d.js").then(function(r){return r.i}),["assets/index.eb64e36d.js","assets/index.396ce416.js","assets/index.d322caf9.css","assets/hooks.module.57014d43.js"])).default;typeof e!="function"&&typeof e.default=="function"&&(e=e.default),v(this,h,new e(this.options));const a=(t=o(this,h).walletExtension)==null?void 0:t.getChainId(),n=this.chains.find(r=>this.options.chainId?r.chainId===this.options.chainId:r.chainId===a)||this.chains[0],i=this.options.chainId||(n==null?void 0:n.chainId),s=this.options.jsonRpcUrl||(n==null?void 0:n.rpc[0]);v(this,d,o(this,h).makeWeb3Provider(s,i))}return o(this,d)}async getSigner(){let{chainId:t}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};const[e,a]=await Promise.all([this.getProvider(),this.getAccount()]);return new m(e,t).getSigner(a)}async isAuthorized(){try{return!!await this.getAccount()}catch{return!1}}async switchChain(t){var n;const e=await this.getProvider(),a=u.hexValue(t);try{return await e.request({method:"wallet_switchEthereumChain",params:[{chainId:a}]}),(n=this.chains.find(i=>i.chainId===t))!=null?n:{chainId:t,name:`Chain ${a}`,slug:`${a}`,nativeCurrency:{name:"Ether",decimals:18,symbol:"ETH"},rpc:[""],testnet:!1,chain:"ethereum",shortName:"eth"}}catch(i){const s=this.chains.find(r=>r.chainId===t);if(!s)throw new U({chainId:t,connectorId:this.id});if(i.code===4902)try{return await e.request({method:"wallet_addEthereumChain",params:[{chainId:a,chainName:s.name,nativeCurrency:s.nativeCurrency,rpcUrls:s.rpc,blockExplorerUrls:this.getBlockExplorerUrls(s)}]}),s}catch(r){throw C(this,p,y).call(this,r)?new l(r):new b}throw C(this,p,y).call(this,i)?new l(i):new A(i)}}async setupListeners(){const t=await this.getProvider();t.on("accountsChanged",this.onAccountsChanged),t.on("chainChanged",this.onChainChanged),t.on("disconnect",this.onDisconnect)}async getQrUrl(){if(await this.getProvider(),!o(this,h))throw new Error("Coinbase Wallet SDK not initialized");return o(this,h).getQrUrl()}}function y(g){return/(user rejected)/i.test(g.message)}export{D as CoinbaseWalletConnector};
//# sourceMappingURL=thirdweb-dev-wallets-evm-connectors-coinbase-wallet.browser.esm.f6b82fef.js.map
