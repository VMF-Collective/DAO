{"version":3,"file":"nft-collection-d29b0868.browser.esm.aa3c61e0.js","sources":["../../node_modules/@thirdweb-dev/sdk/dist/nft-collection-d29b0868.browser.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './QueryParams-7d9473b5.browser.esm.js';\nimport { dz as ContractWrapper, ds as buildTransactionFunction, e as AbiSchema, ag as ContractMetadata, dL as TokenErc721ContractSchema, a$ as ContractAppURI, ah as ContractRoles, ai as ContractRoyalty, aj as ContractPrimarySale, af as ContractEncoder, aP as GasCostEstimator, aQ as ContractEvents, aS as ContractPlatformFee, aR as ContractInterceptor, aD as Erc721WithQuantitySignatureMintable, aU as ContractOwner, bE as getRoleHash, aV as Transaction } from './contract-metadata-88f06ef9.browser.esm.js';\nimport { S as StandardErc721 } from './erc-721-standard-b90faf4d.browser.esm.js';\nimport { constants } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/storage';\nimport 'cross-fetch';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport 'ethers/lib/utils.js';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'uuid';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport 'ethers/lib/utils';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport '@thirdweb-dev/generated-abis';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\n\n/**\n * Create a collection of one-of-one NFTs.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"nft-collection\");\n * ```\n *\n * @public\n */\nclass NFTCollection extends StandardErc721 {\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature().generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    super(contractWrapper, storage, chainId);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"app\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"sales\", void 0);\n    _defineProperty(this, \"platformFees\", void 0);\n    _defineProperty(this, \"royalties\", void 0);\n    _defineProperty(this, \"owner\", void 0);\n    _defineProperty(this, \"signature\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    /** ******************************\n     * WRITE FUNCTIONS\n     *******************************/\n    /**\n     * Mint a unique NFT\n     *\n     * @remarks Mint a unique NFT to a specified wallet.\n     *\n     * @example\n     * ```javascript*\n     * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n     * const metadata = {\n     *   name: \"Cool NFT\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     * };\n     *\n     * const tx = await contract.mint(metadata);\n     * const receipt = tx.receipt; // the transaction receipt\n     * const tokenId = tx.id; // the id of the NFT minted\n     * const nft = await tx.data(); // (optional) fetch details of minted NFT\n     * ```\n     */\n    _defineProperty(this, \"mint\", buildTransactionFunction(async metadata => {\n      return this.erc721.mint.prepare(metadata);\n    }));\n    /**\n     * Mint a unique NFT\n     *\n     * @remarks Mint a unique NFT to a specified wallet.\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet you want to mint the NFT to\n     * const walletAddress = \"{{wallet_address}}\";\n     *\n     * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n     * const metadata = {\n     *   name: \"Cool NFT\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     * };\n     *\n     * const tx = await contract.mintTo(walletAddress, metadata);\n     * const receipt = tx.receipt; // the transaction receipt\n     * const tokenId = tx.id; // the id of the NFT minted\n     * const nft = await tx.data(); // (optional) fetch details of minted NFT\n     * ```\n     */\n    _defineProperty(this, \"mintTo\", buildTransactionFunction(async (walletAddress, metadata) => {\n      return this.erc721.mintTo.prepare(walletAddress, metadata);\n    }));\n    /**\n     * Mint Many unique NFTs\n     *\n     * @remarks Mint many unique NFTs at once to the connected wallet\n     *\n     * @example\n     * ```javascript*\n     * // Custom metadata of the NFTs you want to mint.\n     * const metadatas = [{\n     *   name: \"Cool NFT #1\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     * }, {\n     *   name: \"Cool NFT #2\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/other/image.png\"),\n     * }];\n     *\n     * const tx = await contract.mintBatch(metadatas);\n     * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n     * const firstTokenId = tx[0].id; // token id of the first minted NFT\n     * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n     * ```\n     */\n    _defineProperty(this, \"mintBatch\", buildTransactionFunction(async metadata => {\n      return this.erc721.mintBatch.prepare(metadata);\n    }));\n    /**\n     * Mint Many unique NFTs\n     *\n     * @remarks Mint many unique NFTs at once to a specified wallet.\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet you want to mint the NFT to\n     * const walletAddress = \"{{wallet_address}}\";\n     *\n     * // Custom metadata of the NFTs you want to mint.\n     * const metadatas = [{\n     *   name: \"Cool NFT #1\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     * }, {\n     *   name: \"Cool NFT #2\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/other/image.png\"),\n     * }];\n     *\n     * const tx = await contract.mintBatchTo(walletAddress, metadatas);\n     * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n     * const firstTokenId = tx[0].id; // token id of the first minted NFT\n     * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n     * ```\n     */\n    _defineProperty(this, \"mintBatchTo\", buildTransactionFunction(async (walletAddress, metadata) => {\n      return this.erc721.mintBatchTo.prepare(walletAddress, metadata);\n    }));\n    /**\n     * Burn a single NFT\n     * @param tokenId - the token Id to burn\n     *\n     * @example\n     * ```javascript\n     * const result = await contract.burnToken(tokenId);\n     * ```\n     */\n    _defineProperty(this, \"burn\", buildTransactionFunction(tokenId => {\n      return this.erc721.burn.prepare(tokenId);\n    }));\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, TokenErc721ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, NFTCollection.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.signature = new Erc721WithQuantitySignatureMintable(this.contractWrapper, this.storage);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n  /**\n   * Construct a mint transaction without executing it.\n   * This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param receiver - Address you want to send the token to\n   * @param metadata - The metadata of the NFT you want to mint\n   *\n   * @deprecated Use `contract.mint.prepare(...args)` instead\n   */\n  async getMintTransaction(receiver, metadata) {\n    return this.erc721.getMintTransaction(receiver, metadata);\n  }\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n_defineProperty(NFTCollection, \"contractRoles\", [\"admin\", \"minter\", \"transfer\"]);\n\nexport { NFTCollection };\n"],"names":["NFTCollection","StandardErc721","network","address","storage","options","abi","chainId","contractWrapper","ContractWrapper","_defineProperty","buildTransactionFunction","metadata","walletAddress","tokenId","AbiSchema","ContractMetadata","TokenErc721ContractSchema","ContractAppURI","ContractRoles","ContractRoyalty","ContractPrimarySale","ContractEncoder","GasCostEstimator","ContractEvents","ContractPlatformFee","ContractInterceptor","Erc721WithQuantitySignatureMintable","ContractOwner","getRoleHash","constants.AddressZero","receiver","method","args","overrides","Transaction","functionName"],"mappings":"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"}