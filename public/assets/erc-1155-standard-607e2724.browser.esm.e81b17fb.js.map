{"version":3,"file":"erc-1155-standard-607e2724.browser.esm.e81b17fb.js","sources":["../../node_modules/@thirdweb-dev/sdk/dist/erc-1155-standard-607e2724.browser.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './QueryParams-7d9473b5.browser.esm.js';\nimport { ds as buildTransactionFunction, aF as Erc1155 } from './contract-metadata-88f06ef9.browser.esm.js';\n\n/**\n * Standard ERC1155 NFT functions\n * @remarks Basic functionality for a ERC1155 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.transfer(walletAddress, tokenId, quantity);\n * ```\n * @public\n */\nclass StandardErc1155 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    var _this = this;\n    _defineProperty(this, \"contractWrapper\", void 0);\n    _defineProperty(this, \"storage\", void 0);\n    _defineProperty(this, \"erc1155\", void 0);\n    _defineProperty(this, \"_chainId\", void 0);\n    /**\n     * Transfer an NFT\n     *\n     * @remarks Transfer an NFT from the connected wallet to another wallet.\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet you want to send the NFT to\n     * const toAddress = \"{{wallet_address}}\";\n     * const tokenId = \"0\"; // The token ID of the NFT you want to send\n     * const amount = 3; // How many copies of the NFTs to transfer\n     * await contract.transfer(toAddress, tokenId, amount);\n     * ```\n     */\n    _defineProperty(this, \"transfer\", buildTransactionFunction(async function (to, tokenId, amount) {\n      let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0];\n      return _this.erc1155.transfer.prepare(to, tokenId, amount, data);\n    }));\n    /**\n     * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n     * @param operator - the operator's address\n     * @param approved - whether to approve or remove\n     *\n     * @internal\n     */\n    _defineProperty(this, \"setApprovalForAll\", buildTransactionFunction(async (operator, approved) => {\n      return this.erc1155.setApprovalForAll.prepare(operator, approved);\n    }));\n    /**\n     * Airdrop multiple NFTs\n     *\n     * @remarks Airdrop one or multiple NFTs to the provided wallet addresses.\n     * @twfeature ERC1155\n     * @example\n     * ```javascript\n     * // The token ID of the NFT you want to airdrop\n     * const tokenId = \"0\";\n     * // Array of objects of addresses and quantities to airdrop NFTs to\n     * const addresses = [\n     *  {\n     *    address: \"0x...\",\n     *    quantity: 2,\n     *  },\n     *  {\n     *   address: \"0x...\",\n     *    quantity: 3,\n     *  },\n     * ];\n     * await contract.airdrop(tokenId, addresses);\n     *\n     * // You can also pass an array of addresses, it will airdrop 1 NFT per address\n     * const tokenId = \"0\";\n     * const addresses = [\n     *  \"0x...\", \"0x...\", \"0x...\",\n     * ]\n     * await contract.airdrop(tokenId, addresses);\n     * ```\n     */\n    _defineProperty(this, \"airdrop\", buildTransactionFunction(async function (tokenId, addresses) {\n      let data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0];\n      return _this.erc1155.airdrop.prepare(tokenId, addresses, data);\n    }));\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc1155 = new Erc1155(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  ////// Standard ERC1155 functions //////\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const nft = await contract.get(\"0\");\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc1155.get(tokenId);\n  }\n\n  /**\n   * Returns the total supply of a specific token\n   * @param tokenId - The token ID to get the total supply of\n   * @returns the total supply\n   */\n  async totalSupply(tokenId) {\n    return this.erc1155.totalSupply(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0; // Id of the NFT to check\n   * const balance = await contract.balanceOf(walletAddress, tokenId);\n   * ```\n   */\n  async balanceOf(address, tokenId) {\n    return this.erc1155.balanceOf(address, tokenId);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance(tokenId) {\n    return this.erc1155.balance(tokenId);\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc1155.isApproved(address, operator);\n  }\n}\n\nexport { StandardErc1155 as S };\n"],"names":["StandardErc1155","contractWrapper","storage","chainId","_this","_defineProperty","buildTransactionFunction","to","tokenId","amount","data","operator","approved","addresses","Erc1155","network","address"],"mappings":"sDAaA,MAAMA,CAAgB,CACpB,IAAI,SAAU,CACZ,OAAO,KAAK,QACb,CACD,YAAYC,EAAiBC,EAASC,EAAS,CAC7C,IAAIC,EAAQ,KACZC,EAAgB,KAAM,kBAAmB,MAAM,EAC/CA,EAAgB,KAAM,UAAW,MAAM,EACvCA,EAAgB,KAAM,UAAW,MAAM,EACvCA,EAAgB,KAAM,WAAY,MAAM,EAexCA,EAAgB,KAAM,WAAYC,EAAyB,eAAgBC,EAAIC,EAASC,EAAQ,CAC9F,IAAIC,EAAO,UAAU,OAAS,GAAK,UAAU,KAAO,OAAY,UAAU,GAAK,CAAC,CAAC,EACjF,OAAON,EAAM,QAAQ,SAAS,QAAQG,EAAIC,EAASC,EAAQC,CAAI,CAChE,CAAA,CAAC,EAQFL,EAAgB,KAAM,oBAAqBC,EAAyB,MAAOK,EAAUC,IAC5E,KAAK,QAAQ,kBAAkB,QAAQD,EAAUC,CAAQ,CACjE,CAAC,EA+BFP,EAAgB,KAAM,UAAWC,EAAyB,eAAgBE,EAASK,EAAW,CAC5F,IAAIH,EAAO,UAAU,OAAS,GAAK,UAAU,KAAO,OAAY,UAAU,GAAK,CAAC,CAAC,EACjF,OAAON,EAAM,QAAQ,QAAQ,QAAQI,EAASK,EAAWH,CAAI,CAC9D,CAAA,CAAC,EACF,KAAK,gBAAkBT,EACvB,KAAK,QAAUC,EACf,KAAK,QAAU,IAAIY,EAAQ,KAAK,gBAAiB,KAAK,QAASX,CAAO,EACtE,KAAK,SAAWA,CACjB,CAKD,iBAAiBY,EAAS,CACxB,KAAK,gBAAgB,uBAAuBA,CAAO,CACpD,CACD,YAAa,CACX,OAAO,KAAK,gBAAgB,aAAa,OAC1C,CAcD,MAAM,IAAIP,EAAS,CACjB,OAAO,KAAK,QAAQ,IAAIA,CAAO,CAChC,CAOD,MAAM,YAAYA,EAAS,CACzB,OAAO,KAAK,QAAQ,YAAYA,CAAO,CACxC,CAeD,MAAM,UAAUQ,EAASR,EAAS,CAChC,OAAO,KAAK,QAAQ,UAAUQ,EAASR,CAAO,CAC/C,CAKD,MAAM,QAAQA,EAAS,CACrB,OAAO,KAAK,QAAQ,QAAQA,CAAO,CACpC,CAOD,MAAM,WAAWQ,EAASL,EAAU,CAClC,OAAO,KAAK,QAAQ,WAAWK,EAASL,CAAQ,CACjD,CACH"}