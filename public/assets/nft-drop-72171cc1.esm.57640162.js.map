{"version":3,"file":"nft-drop-72171cc1.esm.57640162.js","sources":["../../node_modules/@thirdweb-dev/sdk/dist/nft-drop-72171cc1.esm.js"],"sourcesContent":["import { _ as _defineProperty, D as DEFAULT_QUERY_ALL_COUNT } from './QueryParams-bc2daded.esm.js';\nimport { az as StandardErc721, cz as ContractWrapper, ab as ContractMetadata, cW as DropErc721ContractSchema, ac as ContractRoles, ad as ContractRoyalty, ae as ContractPrimarySale, ag as DropClaimConditions, aa as ContractEncoder, aL as GasCostEstimator, aM as ContractEvents, aO as ContractPlatformFee, aq as Erc721, af as DelayedReveal, cX as FEATURE_NFT_REVEALABLE, aN as ContractInterceptor, aQ as ContractOwner, cy as PaperCheckout, br as getRoleHash } from './thirdweb-checkout-28b27df7.esm.js';\nimport { BigNumber, constants } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport 'cross-fetch';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Router.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport 'bs58';\n\n/**\n * Setup a collection of one-of-one NFTs that are minted as users claim them.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"nft-drop\");\n * ```\n *\n * @public\n */\nclass NFTDrop extends StandardErc721 {\n  /**\n   * @internal\n   */\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.claimConditions.set(claimConditions);\n   * ```\n   */\n\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   */\n\n  /**\n   * Checkout\n   * @remarks Create a FIAT currency checkout for your NFT drop.\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    super(contractWrapper, storage, chainId);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"sales\", void 0);\n    _defineProperty(this, \"platformFees\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"royalties\", void 0);\n    _defineProperty(this, \"claimConditions\", void 0);\n    _defineProperty(this, \"revealer\", void 0);\n    _defineProperty(this, \"checkout\", void 0);\n    _defineProperty(this, \"erc721\", void 0);\n    _defineProperty(this, \"owner\", void 0);\n    this.abi = abi;\n    this.metadata = new ContractMetadata(this.contractWrapper, DropErc721ContractSchema, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, NFTDrop.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.claimConditions = new DropClaimConditions(this.contractWrapper, this.metadata, this.storage);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.erc721 = new Erc721(this.contractWrapper, this.storage, chainId);\n    this.revealer = new DelayedReveal(this.contractWrapper, this.storage, FEATURE_NFT_REVEALABLE.name, () => this.erc721.nextTokenIdToMint());\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.owner = new ContractOwner(this.contractWrapper);\n    this.checkout = new PaperCheckout(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total count NFTs in this drop contract, both claimed and unclaimed\n   */\n  async totalSupply() {\n    const claimed = await this.totalClaimedSupply();\n    const unclaimed = await this.totalUnclaimedSupply();\n    return claimed.add(unclaimed);\n  }\n\n  /**\n   * Get All Claimed NFTs\n   *\n   * @remarks Fetch all the NFTs (and their owners) that have been claimed in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTs = await contract.getAllClaimed();\n   * const firstOwner = claimedNFTs[0].owner;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata and their ownersfor all NFTs queried.\n   */\n  async getAllClaimed(queryParams) {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(queryParams?.count || DEFAULT_QUERY_ALL_COUNT).toNumber();\n    const maxId = Math.min((await this.contractWrapper.readContract.nextTokenIdToClaim()).toNumber(), start + count);\n    return await Promise.all(Array.from(Array(maxId).keys()).map(i => this.get(i.toString())));\n  }\n\n  /**\n   * Get All Unclaimed NFTs\n   *\n   * @remarks Fetch all the NFTs that have been not been claimed yet in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTs = await contract.getAllUnclaimed();\n   * const firstUnclaimedNFT = unclaimedNFTs[0].name;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAllUnclaimed(queryParams) {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(queryParams?.count || DEFAULT_QUERY_ALL_COUNT).toNumber();\n    const firstTokenId = BigNumber.from(Math.max((await this.contractWrapper.readContract.nextTokenIdToClaim()).toNumber(), start));\n    const maxId = BigNumber.from(Math.min((await this.contractWrapper.readContract.nextTokenIdToMint()).toNumber(), firstTokenId.toNumber() + count));\n    return await Promise.all(Array.from(Array(maxId.sub(firstTokenId).toNumber()).keys()).map(i => this.erc721.getTokenMetadata(firstTokenId.add(i).toString())));\n  }\n\n  /**\n   * Get the claimed supply\n   *\n   * @remarks Get the number of claimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTCount = await contract.totalClaimedSupply();\n   * console.log(`NFTs claimed so far: ${claimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   */\n  async totalClaimedSupply() {\n    return this.erc721.totalClaimedSupply();\n  }\n\n  /**\n   * Get the unclaimed supply\n   *\n   * @remarks Get the number of unclaimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTCount = await contract.totalUnclaimedSupply();\n   * console.log(`NFTs left to claim: ${unclaimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   */\n  async totalUnclaimedSupply() {\n    return this.erc721.totalUnclaimedSupply();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create a batch of unique NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many unique NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   */\n  async createBatch(metadatas, options) {\n    return this.erc721.lazyMint(metadatas, options);\n  }\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress\n   * @param quantity\n   * @param checkERC20Allowance\n   */\n  async getClaimTransaction(destinationAddress, quantity) {\n    let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return this.erc721.getClaimTransaction(destinationAddress, quantity, {\n      checkERC20Allowance\n    });\n  }\n\n  /**\n   * Claim unique NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 1; // how many unique NFTs you want to claim\n   *\n   * const tx = await contract.claimTo(address, quantity);\n   * const receipt = tx[0].receipt; // the transaction receipt\n   * const claimedTokenId = tx[0].id; // the id of the NFT claimed\n   * const claimedNFT = await tx[0].data(); // (optional) get the claimed NFT metadata\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  async claimTo(destinationAddress, quantity) {\n    let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return this.erc721.claimTo(destinationAddress, quantity, {\n      checkERC20Allowance\n    });\n  }\n\n  /**\n   * Claim NFTs to the connected wallet.\n   *\n   * @remarks See {@link NFTDrop.claimTo}\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  async claim(quantity) {\n    let checkERC20Allowance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return this.claimTo(await this.contractWrapper.getSignerAddress(), quantity, checkERC20Allowance);\n  }\n\n  /**\n   * Burn a single NFT\n   *\n   * @param tokenId - the token Id to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.burnToken(tokenId);\n   * ```\n   *\n   */\n  async burn(tokenId) {\n    return this.erc721.burn(tokenId);\n  }\n\n  /******************************\n   * STANDARD ERC721 FUNCTIONS\n   ******************************/\n\n  /**\n   * Get a single NFT Metadata\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc721.get(tokenId);\n  }\n\n  /**\n   * Get the current owner of a given NFT within this Contract\n   *\n   * @param tokenId - the tokenId of the NFT\n   * @returns the address of the owner\n   */\n  async ownerOf(tokenId) {\n    return this.erc721.ownerOf(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * console.log(balance);\n   * ```\n   */\n  async balanceOf(address) {\n    return this.erc721.balanceOf(address);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance() {\n    return this.erc721.balance();\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc721.isApproved(address, operator);\n  }\n\n  /**\n   * Transfer a single NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0;\n   * await contract.transfer(walletAddress, tokenId);\n   * ```\n   */\n  async transfer(to, tokenId) {\n    return this.erc721.transfer(to, tokenId);\n  }\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  async setApprovalForAll(operator, approved) {\n    return this.erc721.setApprovalForAll(operator, approved);\n  }\n\n  /**\n   * Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specified token.\n   * @param operator - the operator's address\n   * @param tokenId - the tokenId to give approval for\n   *\n   * @internal\n   */\n  async setApprovalForToken(operator, tokenId) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"approve\", [operator, tokenId])\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n}\n_defineProperty(NFTDrop, \"contractRoles\", [\"admin\", \"minter\", \"transfer\"]);\n\nexport { NFTDrop };\n"],"names":["NFTDrop","StandardErc721","network","address","storage","options","abi","chainId","contractWrapper","ContractWrapper","_defineProperty","ContractMetadata","DropErc721ContractSchema","ContractRoles","ContractRoyalty","ContractPrimarySale","DropClaimConditions","ContractEncoder","GasCostEstimator","ContractEvents","ContractPlatformFee","Erc721","DelayedReveal","FEATURE_NFT_REVEALABLE","ContractInterceptor","ContractOwner","PaperCheckout","claimed","unclaimed","queryParams","start","BigNumber","count","DEFAULT_QUERY_ALL_COUNT","maxId","i","firstTokenId","getRoleHash","constants.AddressZero","metadatas","destinationAddress","quantity","checkERC20Allowance","tokenId","operator","to","approved","functionName","_len","args","_key"],"mappings":"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"}