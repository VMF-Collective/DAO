{"version":3,"file":"pack-949ac07a.esm.7a8045ce.js","sources":["../../node_modules/@thirdweb-dev/sdk/dist/pack-949ac07a.esm.js"],"sourcesContent":["import { A as AmountSchema, N as NFTInputOrUriSchema, _ as _defineProperty } from './QueryParams-bc2daded.esm.js';\nimport { cF as AddressSchema, cG as BigNumberishSchema, cH as RawDateSchema, cz as ContractWrapper, cY as FEATURE_PACK_VRF, aM as ContractEvents, a_ as fetchCurrencyMetadata, c5 as LINK_TOKEN_ADDRESS, aj as Erc20, aH as StandardErc1155, bO as assertEnabled, aA as Erc1155, ab as ContractMetadata, cZ as PackContractSchema, ac as ContractRoles, ad as ContractRoyalty, aa as ContractEncoder, aL as GasCostEstimator, aN as ContractInterceptor, aQ as ContractOwner, br as getRoleHash, cT as uploadOrExtractURI, a$ as normalizePriceValue, cU as hasERC20Allowance, cP as isTokenApprovedForTransfer, bP as detectContractFeature } from './thirdweb-checkout-28b27df7.esm.js';\nimport ERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/ERC20.json';\nimport IPackVRFAbi from '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport { BigNumber, ethers } from 'ethers';\nimport { z } from 'zod';\nimport 'bn.js';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport 'cross-fetch';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Router.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport 'bs58';\n\n/**\n * @internal\n */\nconst CommonWrappableSchema = z.object({\n  contractAddress: AddressSchema\n});\n\n/**\n * @internal\n */\nconst ERC20WrappableSchema = CommonWrappableSchema.extend({\n  quantity: AmountSchema\n});\n\n/**\n * @internal\n */\nconst ERC721WrappableSchema = CommonWrappableSchema.extend({\n  tokenId: BigNumberishSchema\n});\n\n/**\n * @internal\n */\nconst ERC1155WrappableSchema = CommonWrappableSchema.extend({\n  tokenId: BigNumberishSchema,\n  quantity: BigNumberishSchema\n});\n\n/**\n * @internal\n */\nconst ERC20RewardSchema = ERC20WrappableSchema.omit({\n  quantity: true\n}).extend({\n  quantityPerReward: AmountSchema\n});\n\n/**\n * @internal\n */\nconst ERC721RewardSchema = ERC721WrappableSchema;\n\n/**\n * @internal\n */\nconst ERC1155RewardSchema = ERC1155WrappableSchema.omit({\n  quantity: true\n}).extend({\n  quantityPerReward: BigNumberishSchema\n});\n\n/**\n * @internal\n */\nconst ERC20RewardContentsSchema = ERC20RewardSchema.extend({\n  totalRewards: BigNumberishSchema.default(\"1\")\n});\n\n/**\n * @internal\n */\nconst ERC721RewardContentsSchema = ERC721RewardSchema;\n\n/**\n * @internal\n */\nconst ERC1155RewardContentsSchema = ERC1155RewardSchema.extend({\n  totalRewards: BigNumberishSchema.default(\"1\")\n});\n\n/**\n * @internal\n */\nz.object({\n  erc20Rewards: z.array(ERC20RewardSchema).default([]),\n  erc721Rewards: z.array(ERC721RewardSchema).default([]),\n  erc1155Rewards: z.array(ERC1155RewardSchema).default([])\n});\n\n/**\n * @internal\n */\nconst PackRewardsOutputSchema = z.object({\n  erc20Rewards: z.array(ERC20RewardContentsSchema).default([]),\n  erc721Rewards: z.array(ERC721RewardContentsSchema).default([]),\n  erc1155Rewards: z.array(ERC1155RewardContentsSchema).default([])\n});\n\n/**\n * @internal\n */\nconst PackMetadataInputSchema = PackRewardsOutputSchema.extend({\n  packMetadata: NFTInputOrUriSchema,\n  rewardsPerPack: BigNumberishSchema.default(\"1\"),\n  openStartTime: RawDateSchema.default(new Date())\n});\n\n/**\n * @public\n */\n\nclass PackVRF {\n  constructor(network, address, storage, options, chainId) {\n    let contractWrapper = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new ContractWrapper(network, address, IPackVRFAbi, options);\n    _defineProperty(this, \"featureName\", FEATURE_PACK_VRF.name);\n    _defineProperty(this, \"contractWrapper\", void 0);\n    _defineProperty(this, \"storage\", void 0);\n    _defineProperty(this, \"chainId\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.chainId = chainId;\n    this.events = new ContractEvents(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /**\n   * Open a pack using Chainlink VRFs random number generation\n   * This will return a transaction result with the requestId of the open request, NOT the contents of the pack\n   * To get the contents of the pack, you must call claimRewards once the VRF request has been fulfilled\n   * You can use the canClaimRewards method to check if the VRF request has been fulfilled\n   * @param tokenId\n   * @param amount\n   * @returns\n   */\n  async open(tokenId) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const receipt = await this.contractWrapper.sendTransaction(\"openPack\", [tokenId, amount], {\n      // Higher gas limit for opening packs\n      gasLimit: 500000\n    });\n    let id = BigNumber.from(0);\n    try {\n      const event = this.contractWrapper.parseLogs(\"PackOpenRequested\", receipt?.logs);\n      id = event[0].args.requestId;\n    } catch (e) {}\n    return {\n      receipt,\n      id\n    };\n  }\n\n  /**\n   * Claim the rewards from a pack that has been opened\n   * This will return the contents of the pack\n   * Make sure to check if the VRF request has been fulfilled using canClaimRewards() before calling this method\n   * @returns the random rewards from opening a pack\n   */\n  async claimRewards() {\n    const receipt = await this.contractWrapper.sendTransaction(\"claimRewards\", [], {\n      // Higher gas limit for opening packs\n      gasLimit: 500000\n    });\n    const event = this.contractWrapper.parseLogs(\"PackOpened\", receipt?.logs);\n    if (event.length === 0) {\n      throw new Error(\"PackOpened event not found\");\n    }\n    const rewards = event[0].args.rewardUnitsDistributed;\n    return this.parseRewards(rewards);\n  }\n  async parseRewards(rewards) {\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n    for (const reward of rewards) {\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), reward.assetContract);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward: ethers.utils.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: reward.totalAmount.toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n\n  /**\n   * Setup a listener that will be called everytime a pack is opened in this contract\n   * @param callback the listener to call when a pack is opened\n   * @returns a unsubscribe function to cleanup the listener\n   */\n  async addPackOpenEventListener(callback) {\n    return this.events.addEventListener(\"PackOpened\", async event => {\n      callback(event.data.packId.toString(), event.data.opener, await this.parseRewards(event.data.rewardUnitsDistributed));\n    });\n  }\n\n  /**\n   * Check if the connected address can claim rewards after opening a pack\n   * @param claimerAddress Optional: the address to check if they can claim rewards, defaults to the connected address\n   * @returns whether the connected address can claim rewards after opening a pack\n   */\n  async canClaimRewards(claimerAddress) {\n    const address = claimerAddress || (await this.contractWrapper.getSignerAddress());\n    return await this.contractWrapper.readContract.canClaimRewards(address);\n  }\n\n  /**\n   * Open a pack and claim the rewards in one transaction.\n   * This function will only start the flow of opening a pack, the rewards will be granted automatically to the connected address after VRF request is fulfilled\n   * @param packId The id of the pack to open\n   * @param amount Optional: the amount of packs to open, defaults to 1\n   * @param gasLimit Optional: the gas limit to use for the VRF callback transaction, defaults to 500000\n   * @returns\n   */\n  async openAndClaim(packId) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n    const receipt = await this.contractWrapper.sendTransaction(\"openPackAndClaimRewards\", [packId, amount, gasLimit], {\n      // Higher gas limit for opening packs\n      gasLimit: BigNumber.from(500000)\n    });\n    let id = BigNumber.from(0);\n    try {\n      const event = this.contractWrapper.parseLogs(\"PackOpenRequested\", receipt?.logs);\n      id = event[0].args.requestId;\n    } catch (e) {}\n    return {\n      receipt,\n      id\n    };\n  }\n\n  /**\n   * Get the balance of LINK in the contract\n   * @returns the balance of LINK in the contract\n   */\n  async getLinkBalance() {\n    return this.getLinkContract().balanceOf(this.contractWrapper.readContract.address);\n  }\n\n  /**\n   * Transfer LINK to this contract\n   * @param amount the amount of LINK to transfer to the contract\n   */\n  async transferLink(amount) {\n    await this.getLinkContract().transfer(this.contractWrapper.readContract.address, amount);\n  }\n  getLinkContract() {\n    const linkAddress = LINK_TOKEN_ADDRESS[this.chainId];\n    if (!linkAddress) {\n      throw new Error(`No LINK token address found for chainId ${this.chainId}`);\n    }\n    const contract = new ContractWrapper(this.contractWrapper.getSignerOrProvider(), linkAddress, ERC20Abi, this.contractWrapper.options);\n    return new Erc20(contract, this.storage, this.chainId);\n  }\n}\n\n/**\n * Create lootboxes of NFTs with rarity based open mechanics.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"pack\");\n * ```\n *\n * @public\n */\nclass Pack extends StandardErc1155 {\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per pack\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular pack\n   * contract.royalties.setTokenRoyaltyInfo(packId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  /**\n   * If enabled in the contract, use the Chainlink VRF functionality to open packs\n   */\n  get vrf() {\n    return assertEnabled(this._vrf, FEATURE_PACK_VRF);\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options.gasless && \"openzeppelin\" in options.gasless ? {\n      ...options,\n      gasless: {\n        openzeppelin: {\n          ...options.gasless.openzeppelin,\n          useEOAForwarder: true\n        }\n      }\n    } : options);\n    super(contractWrapper, storage, chainId);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"royalties\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"erc1155\", void 0);\n    _defineProperty(this, \"owner\", void 0);\n    _defineProperty(this, \"_vrf\", void 0);\n    this.abi = abi;\n    this.erc1155 = new Erc1155(this.contractWrapper, this.storage, chainId);\n    this.metadata = new ContractMetadata(this.contractWrapper, PackContractSchema, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Pack.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.owner = new ContractOwner(this.contractWrapper);\n    this._vrf = this.detectVrf();\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n    this._vrf?.onNetworkUpdated(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a single Pack\n   *\n   * @remarks Get all the data associated with every pack in this contract.\n   *\n   * By default, returns the first 100 packs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const pack = await contract.get(0);\n   * console.log(packs;\n   * ```\n   */\n  async get(tokenId) {\n    return this.erc1155.get(tokenId);\n  }\n\n  /**\n   * Get All Packs\n   *\n   * @remarks Get all the data associated with every pack in this contract.\n   *\n   * By default, returns the first 100 packs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const packs = await contract.getAll();\n   * console.log(packs;\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The pack metadata for all packs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc1155.getAll(queryParams);\n  }\n\n  /**\n   * Get Owned Packs\n   *\n   * @remarks Get all the data associated with the packs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the packs of\n   * const address = \"{{wallet_address}}\";\n   * const packss = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The pack metadata for all the owned packs in the contract.\n   */\n  async getOwned(walletAddress) {\n    return this.erc1155.getOwned(walletAddress);\n  }\n\n  /**\n   * Get the number of packs created\n   * @returns the total number of packs minted in this contract\n   * @public\n   */\n  async getTotalCount() {\n    return this.erc1155.totalCount();\n  }\n\n  /**\n   * Get whether users can transfer packs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), ethers.constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n\n  /**\n   * Get Pack Contents\n   * @remarks Get the rewards contained inside a pack.\n   *\n   * @param packId - The id of the pack to get the contents of.\n   * @returns - The contents of the pack.\n   *\n   * @example\n   * ```javascript\n   * const packId = 0;\n   * const contents = await contract.getPackContents(packId);\n   * console.log(contents.erc20Rewards);\n   * console.log(contents.erc721Rewards);\n   * console.log(contents.erc1155Rewards);\n   * ```\n   */\n  async getPackContents(packId) {\n    const {\n      contents,\n      perUnitAmounts\n    } = await this.contractWrapper.readContract.getPackContents(packId);\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n    for (let i = 0; i < contents.length; i++) {\n      const reward = contents[i];\n      const amount = perUnitAmounts[i];\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), reward.assetContract);\n            const rewardAmount = ethers.utils.formatUnits(reward.totalAmount, tokenMetadata.decimals);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward: amount.toString(),\n              totalRewards: BigNumber.from(rewardAmount).div(amount).toString()\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: amount.toString(),\n              totalRewards: BigNumber.from(reward.totalAmount).div(amount).toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Pack\n   * @remarks Create a new pack with the given metadata and rewards and mint it to the connected wallet.\n   * @remarks See {@link Pack.createTo}\n   *\n   * @param metadataWithRewards - the metadata and rewards to include in the pack\n   * @example\n   * ```javascript\n   * const pack = {\n   *   // The metadata for the pack NFT itself\n   *   packMetadata: {\n   *     name: \"My Pack\",\n   *     description: \"This is a new pack\",\n   *     image: \"ipfs://...\",\n   *   },\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n   *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n   * }\n   *\n   * const tx = await contract.create(pack);\n   * ```\n   */\n  async create(metadataWithRewards) {\n    const signerAddress = await this.contractWrapper.getSignerAddress();\n    return this.createTo(signerAddress, metadataWithRewards);\n  }\n\n  /**\n   * Add Pack Contents\n   * @remarks Add contents to an existing pack.\n   * @remarks See {@link Pack.addPackContents}\n   *\n   * @param packId - token Id of the pack to add contents to\n   * @param packContents - the rewards to include in the pack\n   * @example\n   * ```javascript\n   * const packContents = {\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   * }\n   *\n   * const tx = await contract.addPackContents(packId, packContents);\n   * ```\n   */\n  async addPackContents(packId, packContents) {\n    const signerAddress = await this.contractWrapper.getSignerAddress();\n    const parsedContents = PackRewardsOutputSchema.parse(packContents);\n    const {\n      contents,\n      numOfRewardUnits\n    } = await this.toPackContentArgs(parsedContents);\n    const receipt = await this.contractWrapper.sendTransaction(\"addPackContents\", [packId, contents, numOfRewardUnits, signerAddress]);\n    const event = this.contractWrapper.parseLogs(\"PackUpdated\", receipt?.logs);\n    if (event.length === 0) {\n      throw new Error(\"PackUpdated event not found\");\n    }\n    const id = event[0].args.packId;\n    return {\n      id: id,\n      receipt,\n      data: () => this.erc1155.get(id)\n    };\n  }\n\n  /**\n   * Create Pack To Wallet\n   * @remarks Create a new pack with the given metadata and rewards and mint it to the specified address.\n   *\n   * @param to - the address to mint the pack to\n   * @param metadataWithRewards - the metadata and rewards to include in the pack\n   *\n   * @example\n   * ```javascript\n   * const pack = {\n   *   // The metadata for the pack NFT itself\n   *   packMetadata: {\n   *     name: \"My Pack\",\n   *     description: \"This is a new pack\",\n   *     image: \"ipfs://...\",\n   *   },\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n   *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n   * }\n   *\n   * const tx = await contract.createTo(\"0x...\", pack);\n   * ```\n   */\n  async createTo(to, metadataWithRewards) {\n    const uri = await uploadOrExtractURI(metadataWithRewards.packMetadata, this.storage);\n    const parsedMetadata = PackMetadataInputSchema.parse(metadataWithRewards);\n    const {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    } = parsedMetadata;\n    const rewardsData = {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n    const {\n      contents,\n      numOfRewardUnits\n    } = await this.toPackContentArgs(rewardsData);\n    const receipt = await this.contractWrapper.sendTransaction(\"createPack\", [contents, numOfRewardUnits, uri, parsedMetadata.openStartTime, parsedMetadata.rewardsPerPack, to]);\n    const event = this.contractWrapper.parseLogs(\"PackCreated\", receipt?.logs);\n    if (event.length === 0) {\n      throw new Error(\"PackCreated event not found\");\n    }\n    const packId = event[0].args.packId;\n    return {\n      id: packId,\n      receipt,\n      data: () => this.erc1155.get(packId)\n    };\n  }\n\n  /**\n   * Open Pack\n   *\n   * @remarks - Open a pack to reveal the contained rewards. This will burn the specified pack and\n   * the contained assets will be transferred to the opening users wallet.\n   *\n   * @param tokenId - the token ID of the pack you want to open\n   * @param amount - the amount of packs you want to open\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0\n   * const amount = 1\n   * const tx = await contract.open(tokenId, amount);\n   * ```\n   */\n  async open(tokenId) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    if (this._vrf) {\n      throw new Error(\"This contract is using Chainlink VRF, use `contract.vrf.open()` or `contract.vrf.openAndClaim()` instead\");\n    }\n    const receipt = await this.contractWrapper.sendTransaction(\"openPack\", [tokenId, amount], {\n      // Higher gas limit for opening packs\n      gasLimit: 500000\n    });\n    const event = this.contractWrapper.parseLogs(\"PackOpened\", receipt?.logs);\n    if (event.length === 0) {\n      throw new Error(\"PackOpened event not found\");\n    }\n    const rewards = event[0].args.rewardUnitsDistributed;\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n    for (const reward of rewards) {\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), reward.assetContract);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward: ethers.utils.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: reward.totalAmount.toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n\n  /** *****************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async toPackContentArgs(metadataWithRewards) {\n    const contents = [];\n    const numOfRewardUnits = [];\n    const {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    } = metadataWithRewards;\n    const provider = this.contractWrapper.getProvider();\n    const owner = await this.contractWrapper.getSignerAddress();\n    for (const erc20 of erc20Rewards) {\n      const normalizedQuantity = await normalizePriceValue(provider, erc20.quantityPerReward, erc20.contractAddress);\n      // Multiply the quantity of one reward by the number of rewards\n      const totalQuantity = normalizedQuantity.mul(erc20.totalRewards);\n      const hasAllowance = await hasERC20Allowance(this.contractWrapper, erc20.contractAddress, totalQuantity);\n      if (!hasAllowance) {\n        throw new Error(`ERC20 token with contract address \"${erc20.contractAddress}\" does not have enough allowance to transfer.\\n\\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\\n\\nawait sdk.getToken(\"${erc20.contractAddress}\").setAllowance(\"${this.getAddress()}\", ${totalQuantity});\\n\\n`);\n      }\n      numOfRewardUnits.push(erc20.totalRewards);\n      contents.push({\n        assetContract: erc20.contractAddress,\n        tokenType: 0,\n        totalAmount: totalQuantity,\n        tokenId: 0\n      });\n    }\n    for (const erc721 of erc721Rewards) {\n      const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc721.contractAddress, erc721.tokenId, owner);\n      if (!isApproved) {\n        throw new Error(`ERC721 token \"${erc721.tokenId}\" with contract address \"${erc721.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getNFTCollection(\"${erc721.contractAddress}\").setApprovalForToken(\"${this.getAddress()}\", ${erc721.tokenId});\\n\\n`);\n      }\n      numOfRewardUnits.push(\"1\");\n      contents.push({\n        assetContract: erc721.contractAddress,\n        tokenType: 1,\n        totalAmount: 1,\n        tokenId: erc721.tokenId\n      });\n    }\n    for (const erc1155 of erc1155Rewards) {\n      const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc1155.contractAddress, erc1155.tokenId, owner);\n      if (!isApproved) {\n        throw new Error(`ERC1155 token \"${erc1155.tokenId}\" with contract address \"${erc1155.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getEdition(\"${erc1155.contractAddress}\").setApprovalForAll(\"${this.getAddress()}\", true);\\n\\n`);\n      }\n      numOfRewardUnits.push(erc1155.totalRewards);\n      contents.push({\n        assetContract: erc1155.contractAddress,\n        tokenType: 2,\n        totalAmount: BigNumber.from(erc1155.quantityPerReward).mul(BigNumber.from(erc1155.totalRewards)),\n        tokenId: erc1155.tokenId\n      });\n    }\n    return {\n      contents,\n      numOfRewardUnits\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n  detectVrf() {\n    if (detectContractFeature(this.contractWrapper, \"PackVRF\")) {\n      return new PackVRF(this.contractWrapper.getSignerOrProvider(), this.contractWrapper.readContract.address, this.storage, this.contractWrapper.options, this.chainId);\n    }\n    return undefined;\n  }\n}\n_defineProperty(Pack, \"contractRoles\", [\"admin\", \"minter\", \"asset\", \"transfer\"]);\n\nexport { Pack };\n"],"names":["CommonWrappableSchema","z","AddressSchema","ERC20WrappableSchema","AmountSchema","ERC721WrappableSchema","BigNumberishSchema","ERC1155WrappableSchema","ERC20RewardSchema","ERC721RewardSchema","ERC1155RewardSchema","ERC20RewardContentsSchema","ERC721RewardContentsSchema","ERC1155RewardContentsSchema","PackRewardsOutputSchema","PackMetadataInputSchema","NFTInputOrUriSchema","RawDateSchema","PackVRF","network","address","storage","options","chainId","contractWrapper","ContractWrapper","IPackVRFAbi","_defineProperty","FEATURE_PACK_VRF","ContractEvents","tokenId","amount","receipt","id","BigNumber","event","rewards","erc20Rewards","erc721Rewards","erc1155Rewards","reward","tokenMetadata","fetchCurrencyMetadata","ethers.utils.formatUnits","callback","claimerAddress","packId","gasLimit","linkAddress","LINK_TOKEN_ADDRESS","contract","ERC20Abi","Erc20","Pack","StandardErc1155","assertEnabled","abi","Erc1155","ContractMetadata","PackContractSchema","ContractRoles","ContractRoyalty","ContractEncoder","GasCostEstimator","ContractInterceptor","ContractOwner","_a","queryParams","walletAddress","getRoleHash","ethers.constants.AddressZero","contents","perUnitAmounts","rewardAmount","metadataWithRewards","signerAddress","packContents","parsedContents","numOfRewardUnits","to","uri","uploadOrExtractURI","parsedMetadata","rewardsData","provider","owner","erc20","totalQuantity","normalizePriceValue","hasERC20Allowance","erc721","isTokenApprovedForTransfer","erc1155","functionName","_len","args","_key","detectContractFeature"],"mappings":"2gGA4EA,MAAMA,EAAwBC,EAAE,OAAO,CACrC,gBAAiBC,CACnB,CAAC,EAKKC,GAAuBH,EAAsB,OAAO,CACxD,SAAUI,CACZ,CAAC,EAKKC,GAAwBL,EAAsB,OAAO,CACzD,QAASM,CACX,CAAC,EAKKC,GAAyBP,EAAsB,OAAO,CAC1D,QAASM,EACT,SAAUA,CACZ,CAAC,EAKKE,EAAoBL,GAAqB,KAAK,CAClD,SAAU,EACZ,CAAC,EAAE,OAAO,CACR,kBAAmBC,CACrB,CAAC,EAKKK,EAAqBJ,GAKrBK,EAAsBH,GAAuB,KAAK,CACtD,SAAU,EACZ,CAAC,EAAE,OAAO,CACR,kBAAmBD,CACrB,CAAC,EAKKK,GAA4BH,EAAkB,OAAO,CACzD,aAAcF,EAAmB,QAAQ,GAAG,CAC9C,CAAC,EAKKM,GAA6BH,EAK7BI,GAA8BH,EAAoB,OAAO,CAC7D,aAAcJ,EAAmB,QAAQ,GAAG,CAC9C,CAAC,EAKDL,EAAE,OAAO,CACP,aAAcA,EAAE,MAAMO,CAAiB,EAAE,QAAQ,CAAA,CAAE,EACnD,cAAeP,EAAE,MAAMQ,CAAkB,EAAE,QAAQ,CAAA,CAAE,EACrD,eAAgBR,EAAE,MAAMS,CAAmB,EAAE,QAAQ,CAAA,CAAE,CACzD,CAAC,EAKD,MAAMI,EAA0Bb,EAAE,OAAO,CACvC,aAAcA,EAAE,MAAMU,EAAyB,EAAE,QAAQ,CAAA,CAAE,EAC3D,cAAeV,EAAE,MAAMW,EAA0B,EAAE,QAAQ,CAAA,CAAE,EAC7D,eAAgBX,EAAE,MAAMY,EAA2B,EAAE,QAAQ,CAAA,CAAE,CACjE,CAAC,EAKKE,GAA0BD,EAAwB,OAAO,CAC7D,aAAcE,EACd,eAAgBV,EAAmB,QAAQ,GAAG,EAC9C,cAAeW,EAAc,QAAQ,IAAI,IAAM,CACjD,CAAC,EAMD,MAAMC,EAAQ,CACZ,YAAYC,EAASC,EAASC,EAASC,EAASC,EAAS,CACvD,IAAIC,EAAkB,UAAU,OAAS,GAAK,UAAU,KAAO,OAAY,UAAU,GAAK,IAAIC,EAAgBN,EAASC,EAASM,EAAaJ,CAAO,EACpJK,EAAgB,KAAM,cAAeC,EAAiB,IAAI,EAC1DD,EAAgB,KAAM,kBAAmB,MAAM,EAC/CA,EAAgB,KAAM,UAAW,MAAM,EACvCA,EAAgB,KAAM,UAAW,MAAM,EACvCA,EAAgB,KAAM,SAAU,MAAM,EACtC,KAAK,gBAAkBH,EACvB,KAAK,QAAUH,EACf,KAAK,QAAUE,EACf,KAAK,OAAS,IAAIM,EAAe,KAAK,eAAe,CACtD,CACD,iBAAiBV,EAAS,CACxB,KAAK,gBAAgB,uBAAuBA,CAAO,CACpD,CACD,YAAa,CACX,OAAO,KAAK,gBAAgB,aAAa,OAC1C,CAWD,MAAM,KAAKW,EAAS,CAClB,IAAIC,EAAS,UAAU,OAAS,GAAK,UAAU,KAAO,OAAY,UAAU,GAAK,EACjF,MAAMC,EAAU,MAAM,KAAK,gBAAgB,gBAAgB,WAAY,CAACF,EAASC,CAAM,EAAG,CAExF,SAAU,GAChB,CAAK,EACD,IAAIE,EAAKC,EAAU,KAAK,CAAC,EACzB,GAAI,CAEFD,EADc,KAAK,gBAAgB,UAAU,oBAAqBD,GAAA,YAAAA,EAAS,IAAI,EACpE,GAAG,KAAK,SACzB,MAAM,CAAY,CACd,MAAO,CACL,QAAAA,EACA,GAAAC,CACN,CACG,CAQD,MAAM,cAAe,CACnB,MAAMD,EAAU,MAAM,KAAK,gBAAgB,gBAAgB,eAAgB,GAAI,CAE7E,SAAU,GAChB,CAAK,EACKG,EAAQ,KAAK,gBAAgB,UAAU,aAAcH,GAAA,YAAAA,EAAS,IAAI,EACxE,GAAIG,EAAM,SAAW,EACnB,MAAM,IAAI,MAAM,4BAA4B,EAE9C,MAAMC,EAAUD,EAAM,GAAG,KAAK,uBAC9B,OAAO,KAAK,aAAaC,CAAO,CACjC,CACD,MAAM,aAAaA,EAAS,CAC1B,MAAMC,EAAe,CAAA,EACfC,EAAgB,CAAA,EAChBC,EAAiB,CAAA,EACvB,UAAWC,KAAUJ,EACnB,OAAQI,EAAO,eACR,GACH,CACE,MAAMC,EAAgB,MAAMC,EAAsB,KAAK,gBAAgB,YAAa,EAAEF,EAAO,aAAa,EAC1GH,EAAa,KAAK,CAChB,gBAAiBG,EAAO,cACxB,kBAAmBG,EAAyBH,EAAO,YAAaC,EAAc,QAAQ,EAAE,SAAU,CAChH,CAAa,EACD,KACD,KACE,GACH,CACEH,EAAc,KAAK,CACjB,gBAAiBE,EAAO,cACxB,QAASA,EAAO,QAAQ,SAAU,CAChD,CAAa,EACD,KACD,KACE,GACH,CACED,EAAe,KAAK,CAClB,gBAAiBC,EAAO,cACxB,QAASA,EAAO,QAAQ,SAAU,EAClC,kBAAmBA,EAAO,YAAY,SAAU,CAC9D,CAAa,EACD,KACD,EAGP,MAAO,CACL,aAAAH,EACA,cAAAC,EACA,eAAAC,CACN,CACG,CAOD,MAAM,yBAAyBK,EAAU,CACvC,OAAO,KAAK,OAAO,iBAAiB,aAAc,MAAMT,GAAS,CAC/DS,EAAST,EAAM,KAAK,OAAO,SAAQ,EAAIA,EAAM,KAAK,OAAQ,MAAM,KAAK,aAAaA,EAAM,KAAK,sBAAsB,CAAC,CAC1H,CAAK,CACF,CAOD,MAAM,gBAAgBU,EAAgB,CACpC,MAAMzB,EAAUyB,GAAmB,MAAM,KAAK,gBAAgB,iBAAgB,EAC9E,OAAO,MAAM,KAAK,gBAAgB,aAAa,gBAAgBzB,CAAO,CACvE,CAUD,MAAM,aAAa0B,EAAQ,CACzB,IAAIf,EAAS,UAAU,OAAS,GAAK,UAAU,KAAO,OAAY,UAAU,GAAK,EAC7EgB,EAAW,UAAU,OAAS,GAAK,UAAU,KAAO,OAAY,UAAU,GAAK,IACnF,MAAMf,EAAU,MAAM,KAAK,gBAAgB,gBAAgB,0BAA2B,CAACc,EAAQf,EAAQgB,CAAQ,EAAG,CAEhH,SAAUb,EAAU,KAAK,GAAM,CACrC,CAAK,EACD,IAAID,EAAKC,EAAU,KAAK,CAAC,EACzB,GAAI,CAEFD,EADc,KAAK,gBAAgB,UAAU,oBAAqBD,GAAA,YAAAA,EAAS,IAAI,EACpE,GAAG,KAAK,SACzB,MAAM,CAAY,CACd,MAAO,CACL,QAAAA,EACA,GAAAC,CACN,CACG,CAMD,MAAM,gBAAiB,CACrB,OAAO,KAAK,gBAAe,EAAG,UAAU,KAAK,gBAAgB,aAAa,OAAO,CAClF,CAMD,MAAM,aAAaF,EAAQ,CACzB,MAAM,KAAK,gBAAiB,EAAC,SAAS,KAAK,gBAAgB,aAAa,QAASA,CAAM,CACxF,CACD,iBAAkB,CAChB,MAAMiB,EAAcC,EAAmB,KAAK,SAC5C,GAAI,CAACD,EACH,MAAM,IAAI,MAAM,2CAA2C,KAAK,SAAS,EAE3E,MAAME,EAAW,IAAIzB,EAAgB,KAAK,gBAAgB,sBAAuBuB,EAAaG,EAAU,KAAK,gBAAgB,OAAO,EACpI,OAAO,IAAIC,EAAMF,EAAU,KAAK,QAAS,KAAK,OAAO,CACtD,CACH,CAgBA,MAAMG,UAAaC,CAAgB,CA0BjC,IAAI,KAAM,CACR,OAAOC,EAAc,KAAK,KAAM3B,CAAgB,CACjD,CACD,YAAYT,EAASC,EAASC,EAAS,CACrC,IAAIC,EAAU,UAAU,OAAS,GAAK,UAAU,KAAO,OAAY,UAAU,GAAK,CAAA,EAC9EkC,EAAM,UAAU,OAAS,EAAI,UAAU,GAAK,OAC5CjC,EAAU,UAAU,OAAS,EAAI,UAAU,GAAK,OAChDC,EAAkB,UAAU,OAAS,GAAK,UAAU,KAAO,OAAY,UAAU,GAAK,IAAIC,EAAgBN,EAASC,EAASoC,EAAKlC,EAAQ,SAAW,iBAAkBA,EAAQ,QAAU,CAC1L,GAAGA,EACH,QAAS,CACP,aAAc,CACZ,GAAGA,EAAQ,QAAQ,aACnB,gBAAiB,EAClB,CACF,CACF,EAAGA,CAAO,EACX,MAAME,EAAiBH,EAASE,CAAO,EACvCI,EAAgB,KAAM,MAAO,MAAM,EACnCA,EAAgB,KAAM,WAAY,MAAM,EACxCA,EAAgB,KAAM,QAAS,MAAM,EACrCA,EAAgB,KAAM,UAAW,MAAM,EACvCA,EAAgB,KAAM,SAAU,MAAM,EACtCA,EAAgB,KAAM,YAAa,MAAM,EACzCA,EAAgB,KAAM,YAAa,MAAM,EACzCA,EAAgB,KAAM,cAAe,MAAM,EAC3CA,EAAgB,KAAM,UAAW,MAAM,EACvCA,EAAgB,KAAM,QAAS,MAAM,EACrCA,EAAgB,KAAM,OAAQ,MAAM,EACpC,KAAK,IAAM6B,EACX,KAAK,QAAU,IAAIC,EAAQ,KAAK,gBAAiB,KAAK,QAASlC,CAAO,EACtE,KAAK,SAAW,IAAImC,EAAiB,KAAK,gBAAiBC,EAAoB,KAAK,OAAO,EAC3F,KAAK,MAAQ,IAAIC,EAAc,KAAK,gBAAiBP,EAAK,aAAa,EACvE,KAAK,UAAY,IAAIQ,EAAgB,KAAK,gBAAiB,KAAK,QAAQ,EACxE,KAAK,QAAU,IAAIC,EAAgB,KAAK,eAAe,EACvD,KAAK,UAAY,IAAIC,EAAiB,KAAK,eAAe,EAC1D,KAAK,OAAS,IAAIlC,EAAe,KAAK,eAAe,EACrD,KAAK,YAAc,IAAImC,EAAoB,KAAK,eAAe,EAC/D,KAAK,MAAQ,IAAIC,EAAc,KAAK,eAAe,EACnD,KAAK,KAAO,KAAK,WAClB,CAKD,iBAAiB9C,EAAS,OACxB,KAAK,gBAAgB,uBAAuBA,CAAO,GACnD+C,EAAA,KAAK,OAAL,MAAAA,EAAW,iBAAiB/C,EAC7B,CACD,YAAa,CACX,OAAO,KAAK,gBAAgB,aAAa,OAC1C,CAmBD,MAAM,IAAIW,EAAS,CACjB,OAAO,KAAK,QAAQ,IAAIA,CAAO,CAChC,CAiBD,MAAM,OAAOqC,EAAa,CACxB,OAAO,KAAK,QAAQ,OAAOA,CAAW,CACvC,CAgBD,MAAM,SAASC,EAAe,CAC5B,OAAO,KAAK,QAAQ,SAASA,CAAa,CAC3C,CAOD,MAAM,eAAgB,CACpB,OAAO,KAAK,QAAQ,YACrB,CAKD,MAAM,sBAAuB,CAE3B,MAAO,CADmB,MAAM,KAAK,gBAAgB,aAAa,QAAQC,EAAY,UAAU,EAAGC,CAA4B,CAEhI,CAkBD,MAAM,gBAAgBxB,EAAQ,CAC5B,KAAM,CACJ,SAAAyB,EACA,eAAAC,CACN,EAAQ,MAAM,KAAK,gBAAgB,aAAa,gBAAgB1B,CAAM,EAC5DT,EAAe,CAAA,EACfC,EAAgB,CAAA,EAChBC,EAAiB,CAAA,EACvB,QAAS,EAAI,EAAG,EAAIgC,EAAS,OAAQ,IAAK,CACxC,MAAM/B,EAAS+B,EAAS,GAClBxC,EAASyC,EAAe,GAC9B,OAAQhC,EAAO,eACR,GACH,CACE,MAAMC,EAAgB,MAAMC,EAAsB,KAAK,gBAAgB,YAAa,EAAEF,EAAO,aAAa,EACpGiC,EAAe9B,EAAyBH,EAAO,YAAaC,EAAc,QAAQ,EACxFJ,EAAa,KAAK,CAChB,gBAAiBG,EAAO,cACxB,kBAAmBT,EAAO,SAAU,EACpC,aAAcG,EAAU,KAAKuC,CAAY,EAAE,IAAI1C,CAAM,EAAE,SAAU,CAC/E,CAAa,EACD,KACD,KACE,GACH,CACEO,EAAc,KAAK,CACjB,gBAAiBE,EAAO,cACxB,QAASA,EAAO,QAAQ,SAAU,CAChD,CAAa,EACD,KACD,KACE,GACH,CACED,EAAe,KAAK,CAClB,gBAAiBC,EAAO,cACxB,QAASA,EAAO,QAAQ,SAAU,EAClC,kBAAmBT,EAAO,SAAU,EACpC,aAAcG,EAAU,KAAKM,EAAO,WAAW,EAAE,IAAIT,CAAM,EAAE,SAAU,CACrF,CAAa,EACD,KACD,EAEN,CACD,MAAO,CACL,aAAAM,EACA,cAAAC,EACA,eAAAC,CACN,CACG,CAqDD,MAAM,OAAOmC,EAAqB,CAChC,MAAMC,EAAgB,MAAM,KAAK,gBAAgB,iBAAgB,EACjE,OAAO,KAAK,SAASA,EAAeD,CAAmB,CACxD,CA0CD,MAAM,gBAAgB5B,EAAQ8B,EAAc,CAC1C,MAAMD,EAAgB,MAAM,KAAK,gBAAgB,iBAAgB,EAC3DE,EAAiB/D,EAAwB,MAAM8D,CAAY,EAC3D,CACJ,SAAAL,EACA,iBAAAO,CACD,EAAG,MAAM,KAAK,kBAAkBD,CAAc,EACzC7C,EAAU,MAAM,KAAK,gBAAgB,gBAAgB,kBAAmB,CAACc,EAAQyB,EAAUO,EAAkBH,CAAa,CAAC,EAC3HxC,EAAQ,KAAK,gBAAgB,UAAU,cAAeH,GAAA,YAAAA,EAAS,IAAI,EACzE,GAAIG,EAAM,SAAW,EACnB,MAAM,IAAI,MAAM,6BAA6B,EAE/C,MAAMF,EAAKE,EAAM,GAAG,KAAK,OACzB,MAAO,CACL,GAAIF,EACJ,QAAAD,EACA,KAAM,IAAM,KAAK,QAAQ,IAAIC,CAAE,CACrC,CACG,CAkDD,MAAM,SAAS8C,EAAIL,EAAqB,CACtC,MAAMM,EAAM,MAAMC,EAAmBP,EAAoB,aAAc,KAAK,OAAO,EAC7EQ,EAAiBnE,GAAwB,MAAM2D,CAAmB,EAClE,CACJ,aAAArC,EACA,cAAAC,EACA,eAAAC,CACD,EAAG2C,EACEC,EAAc,CAClB,aAAA9C,EACA,cAAAC,EACA,eAAAC,CACN,EACU,CACJ,SAAAgC,EACA,iBAAAO,CACD,EAAG,MAAM,KAAK,kBAAkBK,CAAW,EACtCnD,EAAU,MAAM,KAAK,gBAAgB,gBAAgB,aAAc,CAACuC,EAAUO,EAAkBE,EAAKE,EAAe,cAAeA,EAAe,eAAgBH,CAAE,CAAC,EACrK5C,EAAQ,KAAK,gBAAgB,UAAU,cAAeH,GAAA,YAAAA,EAAS,IAAI,EACzE,GAAIG,EAAM,SAAW,EACnB,MAAM,IAAI,MAAM,6BAA6B,EAE/C,MAAMW,EAASX,EAAM,GAAG,KAAK,OAC7B,MAAO,CACL,GAAIW,EACJ,QAAAd,EACA,KAAM,IAAM,KAAK,QAAQ,IAAIc,CAAM,CACzC,CACG,CAkBD,MAAM,KAAKhB,EAAS,CAClB,IAAIC,EAAS,UAAU,OAAS,GAAK,UAAU,KAAO,OAAY,UAAU,GAAK,EACjF,GAAI,KAAK,KACP,MAAM,IAAI,MAAM,0GAA0G,EAE5H,MAAMC,EAAU,MAAM,KAAK,gBAAgB,gBAAgB,WAAY,CAACF,EAASC,CAAM,EAAG,CAExF,SAAU,GAChB,CAAK,EACKI,EAAQ,KAAK,gBAAgB,UAAU,aAAcH,GAAA,YAAAA,EAAS,IAAI,EACxE,GAAIG,EAAM,SAAW,EACnB,MAAM,IAAI,MAAM,4BAA4B,EAE9C,MAAMC,EAAUD,EAAM,GAAG,KAAK,uBACxBE,EAAe,CAAA,EACfC,EAAgB,CAAA,EAChBC,EAAiB,CAAA,EACvB,UAAWC,KAAUJ,EACnB,OAAQI,EAAO,eACR,GACH,CACE,MAAMC,EAAgB,MAAMC,EAAsB,KAAK,gBAAgB,YAAa,EAAEF,EAAO,aAAa,EAC1GH,EAAa,KAAK,CAChB,gBAAiBG,EAAO,cACxB,kBAAmBG,EAAyBH,EAAO,YAAaC,EAAc,QAAQ,EAAE,SAAU,CAChH,CAAa,EACD,KACD,KACE,GACH,CACEH,EAAc,KAAK,CACjB,gBAAiBE,EAAO,cACxB,QAASA,EAAO,QAAQ,SAAU,CAChD,CAAa,EACD,KACD,KACE,GACH,CACED,EAAe,KAAK,CAClB,gBAAiBC,EAAO,cACxB,QAASA,EAAO,QAAQ,SAAU,EAClC,kBAAmBA,EAAO,YAAY,SAAU,CAC9D,CAAa,EACD,KACD,EAGP,MAAO,CACL,aAAAH,EACA,cAAAC,EACA,eAAAC,CACN,CACG,CAMD,MAAM,kBAAkBmC,EAAqB,CAC3C,MAAMH,EAAW,CAAA,EACXO,EAAmB,CAAA,EACnB,CACJ,aAAAzC,EACA,cAAAC,EACA,eAAAC,CACD,EAAGmC,EACEU,EAAW,KAAK,gBAAgB,YAAW,EAC3CC,EAAQ,MAAM,KAAK,gBAAgB,iBAAgB,EACzD,UAAWC,KAASjD,EAAc,CAGhC,MAAMkD,GAFqB,MAAMC,EAAoBJ,EAAUE,EAAM,kBAAmBA,EAAM,eAAe,GAEpE,IAAIA,EAAM,YAAY,EAE/D,GAAI,CADiB,MAAMG,EAAkB,KAAK,gBAAiBH,EAAM,gBAAiBC,CAAa,EAErG,MAAM,IAAI,MAAM,sCAAsCD,EAAM;AAAA;AAAA;AAAA;AAAA,sBAA+KA,EAAM,mCAAmC,KAAK,WAAY,OAAMC;AAAA;AAAA,CAAqB,EAElUT,EAAiB,KAAKQ,EAAM,YAAY,EACxCf,EAAS,KAAK,CACZ,cAAee,EAAM,gBACrB,UAAW,EACX,YAAaC,EACb,QAAS,CACjB,CAAO,CACF,CACD,UAAWG,KAAUpD,EAAe,CAElC,GAAI,CADe,MAAMqD,EAA2B,KAAK,gBAAgB,YAAW,EAAI,KAAK,WAAY,EAAED,EAAO,gBAAiBA,EAAO,QAASL,CAAK,EAEtJ,MAAM,IAAI,MAAM,iBAAiBK,EAAO,mCAAmCA,EAAO;AAAA;AAAA;AAAA;AAAA,8BAAoKA,EAAO,0CAA0C,KAAK,WAAY,OAAMA,EAAO;AAAA;AAAA,CAAe,EAEtVZ,EAAiB,KAAK,GAAG,EACzBP,EAAS,KAAK,CACZ,cAAemB,EAAO,gBACtB,UAAW,EACX,YAAa,EACb,QAASA,EAAO,OACxB,CAAO,CACF,CACD,UAAWE,KAAWrD,EAAgB,CAEpC,GAAI,CADe,MAAMoD,EAA2B,KAAK,gBAAgB,YAAW,EAAI,KAAK,WAAY,EAAEC,EAAQ,gBAAiBA,EAAQ,QAASP,CAAK,EAExJ,MAAM,IAAI,MAAM,kBAAkBO,EAAQ,mCAAmCA,EAAQ;AAAA;AAAA;AAAA;AAAA,wBAA8JA,EAAQ,wCAAwC,KAAK,WAAY;AAAA;AAAA,CAAe,EAErUd,EAAiB,KAAKc,EAAQ,YAAY,EAC1CrB,EAAS,KAAK,CACZ,cAAeqB,EAAQ,gBACvB,UAAW,EACX,YAAa1D,EAAU,KAAK0D,EAAQ,iBAAiB,EAAE,IAAI1D,EAAU,KAAK0D,EAAQ,YAAY,CAAC,EAC/F,QAASA,EAAQ,OACzB,CAAO,CACF,CACD,MAAO,CACL,SAAArB,EACA,iBAAAO,CACN,CACG,CAKD,MAAM,KAAKe,EAAc,CACvB,QAASC,EAAO,UAAU,OAAQC,EAAO,IAAI,MAAMD,EAAO,EAAIA,EAAO,EAAI,CAAC,EAAGE,EAAO,EAAGA,EAAOF,EAAME,IAClGD,EAAKC,EAAO,GAAK,UAAUA,GAE7B,OAAO,KAAK,gBAAgB,KAAKH,EAAc,GAAGE,CAAI,CACvD,CACD,WAAY,CACV,GAAIE,EAAsB,KAAK,gBAAiB,SAAS,EACvD,OAAO,IAAI/E,GAAQ,KAAK,gBAAgB,oBAAqB,EAAE,KAAK,gBAAgB,aAAa,QAAS,KAAK,QAAS,KAAK,gBAAgB,QAAS,KAAK,OAAO,CAGrK,CACH,CACAS,EAAgB0B,EAAM,gBAAiB,CAAC,QAAS,SAAU,QAAS,UAAU,CAAC"}